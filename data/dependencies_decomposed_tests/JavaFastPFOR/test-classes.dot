digraph "test-classes" {
    // Path: java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/target/test-classes
   "me.lemire.integercompression.AdhocTest"           -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.AdhocTest"           -> "me.lemire.integercompression.BinaryPacking (not found)";
   "me.lemire.integercompression.AdhocTest"           -> "me.lemire.integercompression.Composition (not found)";
   "me.lemire.integercompression.AdhocTest"           -> "me.lemire.integercompression.FastPFOR (not found)";
   "me.lemire.integercompression.AdhocTest"           -> "me.lemire.integercompression.FastPFOR128 (not found)";
   "me.lemire.integercompression.AdhocTest"           -> "me.lemire.integercompression.IntWrapper (not found)";
   "me.lemire.integercompression.AdhocTest"           -> "me.lemire.integercompression.IntegerCODEC (not found)";
   "me.lemire.integercompression.AdhocTest"           -> "me.lemire.integercompression.SkippableComposition (not found)";
   "me.lemire.integercompression.AdhocTest"           -> "me.lemire.integercompression.SkippableIntegerCODEC (not found)";
   "me.lemire.integercompression.AdhocTest"           -> "me.lemire.integercompression.TestUtils (test-classes)";
   "me.lemire.integercompression.AdhocTest"           -> "me.lemire.integercompression.VariableByte (not found)";
   "me.lemire.integercompression.AdhocTest"           -> "me.lemire.integercompression.differential.IntegratedBinaryPacking (not found)";
   "me.lemire.integercompression.AdhocTest"           -> "me.lemire.integercompression.differential.IntegratedVariableByte (not found)";
   "me.lemire.integercompression.AdhocTest"           -> "me.lemire.integercompression.differential.SkippableIntegratedComposition (not found)";
   "me.lemire.integercompression.AdhocTest"           -> "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC (not found)";
   "me.lemire.integercompression.AdhocTest"           -> "org.junit.Assert (not found)";
   "me.lemire.integercompression.AdhocTest"           -> "org.junit.Test (not found)";
   "me.lemire.integercompression.BasicTest"           -> "java.io.PrintStream (java.base)";
   "me.lemire.integercompression.BasicTest"           -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.BasicTest"           -> "java.lang.ClassNotFoundException (java.base)";
   "me.lemire.integercompression.BasicTest"           -> "java.lang.Math (java.base)";
   "me.lemire.integercompression.BasicTest"           -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.BasicTest"           -> "java.lang.RuntimeException (java.base)";
   "me.lemire.integercompression.BasicTest"           -> "java.lang.String (java.base)";
   "me.lemire.integercompression.BasicTest"           -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.BasicTest"           -> "java.lang.System (java.base)";
   "me.lemire.integercompression.BasicTest"           -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.BasicTest"           -> "java.util.Random (java.base)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.BinaryPacking (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.BitPacking (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.Composition (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.DeltaZigzagBinaryPacking (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.DeltaZigzagVariableByte (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.FastPFOR (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.FastPFOR128 (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.GroupSimple9 (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.IntWrapper (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.IntegerCODEC (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.JustCopy (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.NewPFD (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.NewPFDS16 (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.NewPFDS9 (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.OptPFD (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.OptPFDS16 (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.OptPFDS9 (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.Simple16 (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.Simple9 (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.TestUtils (test-classes)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.VariableByte (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.differential.Delta (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.differential.IntegratedBinaryPacking (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.differential.IntegratedComposition (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.differential.IntegratedIntegerCODEC (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.differential.IntegratedVariableByte (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.differential.XorBinaryPacking (not found)";
   "me.lemire.integercompression.BasicTest"           -> "me.lemire.integercompression.synth.ClusteredDataGenerator (not found)";
   "me.lemire.integercompression.BasicTest"           -> "org.junit.Assert (not found)";
   "me.lemire.integercompression.BasicTest"           -> "org.junit.Test (not found)";
   "me.lemire.integercompression.BoundaryTest"        -> "java.io.PrintStream (java.base)";
   "me.lemire.integercompression.BoundaryTest"        -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.BoundaryTest"        -> "java.lang.String (java.base)";
   "me.lemire.integercompression.BoundaryTest"        -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.BoundaryTest"        -> "java.lang.System (java.base)";
   "me.lemire.integercompression.BoundaryTest"        -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.BoundaryTest"        -> "me.lemire.integercompression.BinaryPacking (not found)";
   "me.lemire.integercompression.BoundaryTest"        -> "me.lemire.integercompression.Composition (not found)";
   "me.lemire.integercompression.BoundaryTest"        -> "me.lemire.integercompression.IntWrapper (not found)";
   "me.lemire.integercompression.BoundaryTest"        -> "me.lemire.integercompression.IntegerCODEC (not found)";
   "me.lemire.integercompression.BoundaryTest"        -> "me.lemire.integercompression.VariableByte (not found)";
   "me.lemire.integercompression.BoundaryTest"        -> "me.lemire.integercompression.differential.IntegratedBinaryPacking (not found)";
   "me.lemire.integercompression.BoundaryTest"        -> "me.lemire.integercompression.differential.IntegratedComposition (not found)";
   "me.lemire.integercompression.BoundaryTest"        -> "me.lemire.integercompression.differential.IntegratedIntegerCODEC (not found)";
   "me.lemire.integercompression.BoundaryTest"        -> "me.lemire.integercompression.differential.IntegratedVariableByte (not found)";
   "me.lemire.integercompression.BoundaryTest"        -> "org.junit.Assert (not found)";
   "me.lemire.integercompression.BoundaryTest"        -> "org.junit.Test (not found)";
   "me.lemire.integercompression.ByteBasicTest"       -> "java.io.PrintStream (java.base)";
   "me.lemire.integercompression.ByteBasicTest"       -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.ByteBasicTest"       -> "java.lang.ClassNotFoundException (java.base)";
   "me.lemire.integercompression.ByteBasicTest"       -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.ByteBasicTest"       -> "java.lang.RuntimeException (java.base)";
   "me.lemire.integercompression.ByteBasicTest"       -> "java.lang.String (java.base)";
   "me.lemire.integercompression.ByteBasicTest"       -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.ByteBasicTest"       -> "java.lang.System (java.base)";
   "me.lemire.integercompression.ByteBasicTest"       -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.ByteBasicTest"       -> "me.lemire.integercompression.ByteIntegerCODEC (not found)";
   "me.lemire.integercompression.ByteBasicTest"       -> "me.lemire.integercompression.IntWrapper (not found)";
   "me.lemire.integercompression.ByteBasicTest"       -> "me.lemire.integercompression.TestUtils (test-classes)";
   "me.lemire.integercompression.ByteBasicTest"       -> "me.lemire.integercompression.VariableByte (not found)";
   "me.lemire.integercompression.ByteBasicTest"       -> "me.lemire.integercompression.differential.IntegratedVariableByte (not found)";
   "me.lemire.integercompression.ByteBasicTest"       -> "org.junit.Assert (not found)";
   "me.lemire.integercompression.ByteBasicTest"       -> "org.junit.Test (not found)";
   "me.lemire.integercompression.DeltaZigzagEncodingTest" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.DeltaZigzagEncodingTest" -> "me.lemire.integercompression.DeltaZigzagEncoding (not found)";
   "me.lemire.integercompression.DeltaZigzagEncodingTest" -> "me.lemire.integercompression.DeltaZigzagEncoding$Decoder (not found)";
   "me.lemire.integercompression.DeltaZigzagEncodingTest" -> "me.lemire.integercompression.DeltaZigzagEncoding$Encoder (not found)";
   "me.lemire.integercompression.DeltaZigzagEncodingTest" -> "me.lemire.integercompression.DeltaZigzagEncodingTest$SpotChecker (test-classes)";
   "me.lemire.integercompression.DeltaZigzagEncodingTest" -> "org.junit.Assert (not found)";
   "me.lemire.integercompression.DeltaZigzagEncodingTest" -> "org.junit.Test (not found)";
   "me.lemire.integercompression.DeltaZigzagEncodingTest$SpotChecker" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.DeltaZigzagEncodingTest$SpotChecker" -> "me.lemire.integercompression.DeltaZigzagEncoding (not found)";
   "me.lemire.integercompression.DeltaZigzagEncodingTest$SpotChecker" -> "me.lemire.integercompression.DeltaZigzagEncoding$Decoder (not found)";
   "me.lemire.integercompression.DeltaZigzagEncodingTest$SpotChecker" -> "me.lemire.integercompression.DeltaZigzagEncoding$Encoder (not found)";
   "me.lemire.integercompression.DeltaZigzagEncodingTest$SpotChecker" -> "me.lemire.integercompression.DeltaZigzagEncodingTest (test-classes)";
   "me.lemire.integercompression.DeltaZigzagEncodingTest$SpotChecker" -> "org.junit.Assert (not found)";
   "me.lemire.integercompression.ExampleTest"         -> "java.io.PrintStream (java.base)";
   "me.lemire.integercompression.ExampleTest"         -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.ExampleTest"         -> "java.lang.RuntimeException (java.base)";
   "me.lemire.integercompression.ExampleTest"         -> "java.lang.String (java.base)";
   "me.lemire.integercompression.ExampleTest"         -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.ExampleTest"         -> "java.lang.System (java.base)";
   "me.lemire.integercompression.ExampleTest"         -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.ExampleTest"         -> "me.lemire.integercompression.BinaryPacking (not found)";
   "me.lemire.integercompression.ExampleTest"         -> "me.lemire.integercompression.Composition (not found)";
   "me.lemire.integercompression.ExampleTest"         -> "me.lemire.integercompression.FastPFOR (not found)";
   "me.lemire.integercompression.ExampleTest"         -> "me.lemire.integercompression.IntWrapper (not found)";
   "me.lemire.integercompression.ExampleTest"         -> "me.lemire.integercompression.IntegerCODEC (not found)";
   "me.lemire.integercompression.ExampleTest"         -> "me.lemire.integercompression.SkippableComposition (not found)";
   "me.lemire.integercompression.ExampleTest"         -> "me.lemire.integercompression.SkippableIntegerCODEC (not found)";
   "me.lemire.integercompression.ExampleTest"         -> "me.lemire.integercompression.VariableByte (not found)";
   "me.lemire.integercompression.ExampleTest"         -> "me.lemire.integercompression.differential.IntegratedBinaryPacking (not found)";
   "me.lemire.integercompression.ExampleTest"         -> "me.lemire.integercompression.differential.IntegratedComposition (not found)";
   "me.lemire.integercompression.ExampleTest"         -> "me.lemire.integercompression.differential.IntegratedIntCompressor (not found)";
   "me.lemire.integercompression.ExampleTest"         -> "me.lemire.integercompression.differential.IntegratedIntegerCODEC (not found)";
   "me.lemire.integercompression.ExampleTest"         -> "me.lemire.integercompression.differential.IntegratedVariableByte (not found)";
   "me.lemire.integercompression.ExampleTest"         -> "me.lemire.integercompression.differential.SkippableIntegratedComposition (not found)";
   "me.lemire.integercompression.ExampleTest"         -> "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC (not found)";
   "me.lemire.integercompression.ExampleTest"         -> "org.junit.Test (not found)";
   "me.lemire.integercompression.IntCompressorTest"   -> "java.io.PrintStream (java.base)";
   "me.lemire.integercompression.IntCompressorTest"   -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.IntCompressorTest"   -> "java.lang.RuntimeException (java.base)";
   "me.lemire.integercompression.IntCompressorTest"   -> "java.lang.String (java.base)";
   "me.lemire.integercompression.IntCompressorTest"   -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.IntCompressorTest"   -> "java.lang.System (java.base)";
   "me.lemire.integercompression.IntCompressorTest"   -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.IntCompressorTest"   -> "me.lemire.integercompression.BinaryPacking (not found)";
   "me.lemire.integercompression.IntCompressorTest"   -> "me.lemire.integercompression.IntCompressor (not found)";
   "me.lemire.integercompression.IntCompressorTest"   -> "me.lemire.integercompression.SkippableComposition (not found)";
   "me.lemire.integercompression.IntCompressorTest"   -> "me.lemire.integercompression.SkippableIntegerCODEC (not found)";
   "me.lemire.integercompression.IntCompressorTest"   -> "me.lemire.integercompression.VariableByte (not found)";
   "me.lemire.integercompression.IntCompressorTest"   -> "me.lemire.integercompression.differential.IntegratedBinaryPacking (not found)";
   "me.lemire.integercompression.IntCompressorTest"   -> "me.lemire.integercompression.differential.IntegratedIntCompressor (not found)";
   "me.lemire.integercompression.IntCompressorTest"   -> "me.lemire.integercompression.differential.IntegratedVariableByte (not found)";
   "me.lemire.integercompression.IntCompressorTest"   -> "me.lemire.integercompression.differential.SkippableIntegratedComposition (not found)";
   "me.lemire.integercompression.IntCompressorTest"   -> "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC (not found)";
   "me.lemire.integercompression.IntCompressorTest"   -> "org.junit.Assert (not found)";
   "me.lemire.integercompression.IntCompressorTest"   -> "org.junit.Test (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "java.io.BufferedReader (java.base)";
   "me.lemire.integercompression.ResourcedTest"       -> "java.io.File (java.base)";
   "me.lemire.integercompression.ResourcedTest"       -> "java.io.FileReader (java.base)";
   "me.lemire.integercompression.ResourcedTest"       -> "java.io.IOException (java.base)";
   "me.lemire.integercompression.ResourcedTest"       -> "java.io.PrintStream (java.base)";
   "me.lemire.integercompression.ResourcedTest"       -> "java.io.Reader (java.base)";
   "me.lemire.integercompression.ResourcedTest"       -> "java.lang.Integer (java.base)";
   "me.lemire.integercompression.ResourcedTest"       -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.ResourcedTest"       -> "java.lang.String (java.base)";
   "me.lemire.integercompression.ResourcedTest"       -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.ResourcedTest"       -> "java.lang.System (java.base)";
   "me.lemire.integercompression.ResourcedTest"       -> "java.util.ArrayList (java.base)";
   "me.lemire.integercompression.ResourcedTest"       -> "me.lemire.integercompression.BinaryPacking (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "me.lemire.integercompression.FastPFOR (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "me.lemire.integercompression.FastPFOR128 (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "me.lemire.integercompression.IntCompressor (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "me.lemire.integercompression.JustCopy (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "me.lemire.integercompression.NewPFD (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "me.lemire.integercompression.NewPFDS16 (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "me.lemire.integercompression.NewPFDS9 (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "me.lemire.integercompression.OptPFD (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "me.lemire.integercompression.OptPFDS16 (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "me.lemire.integercompression.OptPFDS9 (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "me.lemire.integercompression.Simple16 (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "me.lemire.integercompression.Simple9 (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "me.lemire.integercompression.SkippableComposition (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "me.lemire.integercompression.SkippableIntegerCODEC (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "me.lemire.integercompression.VariableByte (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "me.lemire.integercompression.differential.IntegratedIntCompressor (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "org.junit.Assert (not found)";
   "me.lemire.integercompression.ResourcedTest"       -> "org.junit.Test (not found)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "java.io.PrintStream (java.base)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "java.lang.ClassNotFoundException (java.base)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "java.lang.RuntimeException (java.base)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "java.lang.String (java.base)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "java.lang.System (java.base)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "me.lemire.integercompression.BinaryPacking (not found)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "me.lemire.integercompression.FastPFOR (not found)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "me.lemire.integercompression.FastPFOR128 (not found)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "me.lemire.integercompression.IntWrapper (not found)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "me.lemire.integercompression.JustCopy (not found)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "me.lemire.integercompression.NewPFD (not found)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "me.lemire.integercompression.NewPFDS16 (not found)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "me.lemire.integercompression.NewPFDS9 (not found)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "me.lemire.integercompression.OptPFD (not found)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "me.lemire.integercompression.OptPFDS16 (not found)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "me.lemire.integercompression.OptPFDS9 (not found)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "me.lemire.integercompression.Simple16 (not found)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "me.lemire.integercompression.Simple9 (not found)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "me.lemire.integercompression.SkippableComposition (not found)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "me.lemire.integercompression.SkippableIntegerCODEC (not found)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "me.lemire.integercompression.TestUtils (test-classes)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "me.lemire.integercompression.VariableByte (not found)";
   "me.lemire.integercompression.SkippableBasicTest"  -> "org.junit.Test (not found)";
   "me.lemire.integercompression.TestUtils"           -> "java.io.PrintStream (java.base)";
   "me.lemire.integercompression.TestUtils"           -> "java.lang.Integer (java.base)";
   "me.lemire.integercompression.TestUtils"           -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.TestUtils"           -> "java.lang.RuntimeException (java.base)";
   "me.lemire.integercompression.TestUtils"           -> "java.lang.String (java.base)";
   "me.lemire.integercompression.TestUtils"           -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.TestUtils"           -> "java.lang.System (java.base)";
   "me.lemire.integercompression.TestUtils"           -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.TestUtils"           -> "me.lemire.integercompression.ByteIntegerCODEC (not found)";
   "me.lemire.integercompression.TestUtils"           -> "me.lemire.integercompression.IntWrapper (not found)";
   "me.lemire.integercompression.TestUtils"           -> "me.lemire.integercompression.IntegerCODEC (not found)";
   "me.lemire.integercompression.TestUtils"           -> "me.lemire.integercompression.SkippableIntegerCODEC (not found)";
   "me.lemire.integercompression.TestUtils"           -> "me.lemire.integercompression.Util (not found)";
   "me.lemire.integercompression.TestUtils"           -> "org.junit.Assert (not found)";
   "me.lemire.integercompression.TestUtils"           -> "org.junit.Test (not found)";
   "me.lemire.integercompression.XorBinaryPackingTest" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.XorBinaryPackingTest" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.XorBinaryPackingTest" -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.XorBinaryPackingTest" -> "me.lemire.integercompression.IntegerCODEC (not found)";
   "me.lemire.integercompression.XorBinaryPackingTest" -> "me.lemire.integercompression.TestUtils (test-classes)";
   "me.lemire.integercompression.XorBinaryPackingTest" -> "me.lemire.integercompression.differential.XorBinaryPacking (not found)";
   "me.lemire.integercompression.XorBinaryPackingTest" -> "org.junit.Assert (not found)";
   "me.lemire.integercompression.XorBinaryPackingTest" -> "org.junit.Test (not found)";
   "me.lemire.longcompression.LongBasicTest"          -> "java.io.PrintStream (java.base)";
   "me.lemire.longcompression.LongBasicTest"          -> "java.lang.Class (java.base)";
   "me.lemire.longcompression.LongBasicTest"          -> "java.lang.ClassNotFoundException (java.base)";
   "me.lemire.longcompression.LongBasicTest"          -> "java.lang.Math (java.base)";
   "me.lemire.longcompression.LongBasicTest"          -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.LongBasicTest"          -> "java.lang.RuntimeException (java.base)";
   "me.lemire.longcompression.LongBasicTest"          -> "java.lang.String (java.base)";
   "me.lemire.longcompression.LongBasicTest"          -> "java.lang.StringBuilder (java.base)";
   "me.lemire.longcompression.LongBasicTest"          -> "java.lang.System (java.base)";
   "me.lemire.longcompression.LongBasicTest"          -> "java.util.Arrays (java.base)";
   "me.lemire.longcompression.LongBasicTest"          -> "me.lemire.integercompression.FastPFOR (not found)";
   "me.lemire.longcompression.LongBasicTest"          -> "me.lemire.integercompression.FastPFOR128 (not found)";
   "me.lemire.longcompression.LongBasicTest"          -> "me.lemire.integercompression.IntWrapper (not found)";
   "me.lemire.longcompression.LongBasicTest"          -> "me.lemire.longcompression.IntegratedLongCODEC (not found)";
   "me.lemire.longcompression.LongBasicTest"          -> "me.lemire.longcompression.LongAs2IntsCodec (not found)";
   "me.lemire.longcompression.LongBasicTest"          -> "me.lemire.longcompression.LongCODEC (not found)";
   "me.lemire.longcompression.LongBasicTest"          -> "me.lemire.longcompression.LongJustCopy (not found)";
   "me.lemire.longcompression.LongBasicTest"          -> "me.lemire.longcompression.LongTestUtils (test-classes)";
   "me.lemire.longcompression.LongBasicTest"          -> "me.lemire.longcompression.LongVariableByte (not found)";
   "me.lemire.longcompression.LongBasicTest"          -> "me.lemire.longcompression.differential.LongDelta (not found)";
   "me.lemire.longcompression.LongBasicTest"          -> "org.junit.Assert (not found)";
   "me.lemire.longcompression.LongBasicTest"          -> "org.junit.Test (not found)";
   "me.lemire.longcompression.LongTestUtils"          -> "java.io.PrintStream (java.base)";
   "me.lemire.longcompression.LongTestUtils"          -> "java.lang.Long (java.base)";
   "me.lemire.longcompression.LongTestUtils"          -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.LongTestUtils"          -> "java.lang.RuntimeException (java.base)";
   "me.lemire.longcompression.LongTestUtils"          -> "java.lang.String (java.base)";
   "me.lemire.longcompression.LongTestUtils"          -> "java.lang.System (java.base)";
   "me.lemire.longcompression.LongTestUtils"          -> "java.util.Arrays (java.base)";
   "me.lemire.longcompression.LongTestUtils"          -> "me.lemire.integercompression.IntWrapper (not found)";
   "me.lemire.longcompression.LongTestUtils"          -> "me.lemire.longcompression.ByteLongCODEC (not found)";
   "me.lemire.longcompression.LongTestUtils"          -> "me.lemire.longcompression.LongCODEC (not found)";
   "me.lemire.longcompression.LongTestUtils"          -> "me.lemire.longcompression.SkippableLongCODEC (not found)";
   "me.lemire.longcompression.LongTestUtils"          -> "org.junit.Assert (not found)";
   "me.lemire.longcompression.SkippableLongBasicTest" -> "java.io.PrintStream (java.base)";
   "me.lemire.longcompression.SkippableLongBasicTest" -> "java.lang.Class (java.base)";
   "me.lemire.longcompression.SkippableLongBasicTest" -> "java.lang.ClassNotFoundException (java.base)";
   "me.lemire.longcompression.SkippableLongBasicTest" -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.SkippableLongBasicTest" -> "java.lang.RuntimeException (java.base)";
   "me.lemire.longcompression.SkippableLongBasicTest" -> "java.lang.String (java.base)";
   "me.lemire.longcompression.SkippableLongBasicTest" -> "java.lang.StringBuilder (java.base)";
   "me.lemire.longcompression.SkippableLongBasicTest" -> "java.lang.System (java.base)";
   "me.lemire.longcompression.SkippableLongBasicTest" -> "java.util.Arrays (java.base)";
   "me.lemire.longcompression.SkippableLongBasicTest" -> "me.lemire.integercompression.IntWrapper (not found)";
   "me.lemire.longcompression.SkippableLongBasicTest" -> "me.lemire.longcompression.LongJustCopy (not found)";
   "me.lemire.longcompression.SkippableLongBasicTest" -> "me.lemire.longcompression.LongTestUtils (test-classes)";
   "me.lemire.longcompression.SkippableLongBasicTest" -> "me.lemire.longcompression.LongVariableByte (not found)";
   "me.lemire.longcompression.SkippableLongBasicTest" -> "me.lemire.longcompression.SkippableLongCODEC (not found)";
   "me.lemire.longcompression.SkippableLongBasicTest" -> "org.junit.Test (not found)";
   "me.lemire.longcompression.TestLongAs2IntsCodec"   -> "java.lang.Long (java.base)";
   "me.lemire.longcompression.TestLongAs2IntsCodec"   -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.TestLongAs2IntsCodec"   -> "java.lang.String (java.base)";
   "me.lemire.longcompression.TestLongAs2IntsCodec"   -> "java.lang.invoke.CallSite (java.base)";
   "me.lemire.longcompression.TestLongAs2IntsCodec"   -> "java.lang.invoke.LambdaMetafactory (java.base)";
   "me.lemire.longcompression.TestLongAs2IntsCodec"   -> "java.lang.invoke.MethodHandle (java.base)";
   "me.lemire.longcompression.TestLongAs2IntsCodec"   -> "java.lang.invoke.MethodHandles (java.base)";
   "me.lemire.longcompression.TestLongAs2IntsCodec"   -> "java.lang.invoke.MethodHandles$Lookup (java.base)";
   "me.lemire.longcompression.TestLongAs2IntsCodec"   -> "java.lang.invoke.MethodType (java.base)";
   "me.lemire.longcompression.TestLongAs2IntsCodec"   -> "java.util.function.LongUnaryOperator (java.base)";
   "me.lemire.longcompression.TestLongAs2IntsCodec"   -> "java.util.stream.LongStream (java.base)";
   "me.lemire.longcompression.TestLongAs2IntsCodec"   -> "me.lemire.longcompression.ByteLongCODEC (not found)";
   "me.lemire.longcompression.TestLongAs2IntsCodec"   -> "me.lemire.longcompression.LongAs2IntsCodec (not found)";
   "me.lemire.longcompression.TestLongAs2IntsCodec"   -> "me.lemire.longcompression.LongCODEC (not found)";
   "me.lemire.longcompression.TestLongAs2IntsCodec"   -> "me.lemire.longcompression.LongTestUtils (test-classes)";
   "me.lemire.longcompression.TestLongAs2IntsCodec"   -> "me.lemire.longcompression.SkippableLongCODEC (not found)";
   "me.lemire.longcompression.TestLongAs2IntsCodec"   -> "org.junit.Assert (not found)";
   "me.lemire.longcompression.TestLongAs2IntsCodec"   -> "org.junit.Test (not found)";
   "me.lemire.longcompression.TestLongVariableByte"   -> "java.lang.Long (java.base)";
   "me.lemire.longcompression.TestLongVariableByte"   -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.TestLongVariableByte"   -> "java.lang.String (java.base)";
   "me.lemire.longcompression.TestLongVariableByte"   -> "java.lang.invoke.CallSite (java.base)";
   "me.lemire.longcompression.TestLongVariableByte"   -> "java.lang.invoke.LambdaMetafactory (java.base)";
   "me.lemire.longcompression.TestLongVariableByte"   -> "java.lang.invoke.MethodHandle (java.base)";
   "me.lemire.longcompression.TestLongVariableByte"   -> "java.lang.invoke.MethodHandles (java.base)";
   "me.lemire.longcompression.TestLongVariableByte"   -> "java.lang.invoke.MethodHandles$Lookup (java.base)";
   "me.lemire.longcompression.TestLongVariableByte"   -> "java.lang.invoke.MethodType (java.base)";
   "me.lemire.longcompression.TestLongVariableByte"   -> "java.util.function.LongUnaryOperator (java.base)";
   "me.lemire.longcompression.TestLongVariableByte"   -> "java.util.stream.LongStream (java.base)";
   "me.lemire.longcompression.TestLongVariableByte"   -> "me.lemire.longcompression.ByteLongCODEC (not found)";
   "me.lemire.longcompression.TestLongVariableByte"   -> "me.lemire.longcompression.LongCODEC (not found)";
   "me.lemire.longcompression.TestLongVariableByte"   -> "me.lemire.longcompression.LongTestUtils (test-classes)";
   "me.lemire.longcompression.TestLongVariableByte"   -> "me.lemire.longcompression.LongVariableByte (not found)";
   "me.lemire.longcompression.TestLongVariableByte"   -> "me.lemire.longcompression.SkippableLongCODEC (not found)";
   "me.lemire.longcompression.TestLongVariableByte"   -> "org.junit.Assert (not found)";
   "me.lemire.longcompression.TestLongVariableByte"   -> "org.junit.Test (not found)";
   "me.lemire.longcompression.synth.LongClusteredDataGenerator" -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.synth.LongClusteredDataGenerator" -> "me.lemire.longcompression.synth.LongUniformDataGenerator (test-classes)";
   "me.lemire.longcompression.synth.LongUniformDataGenerator" -> "java.lang.Integer (java.base)";
   "me.lemire.longcompression.synth.LongUniformDataGenerator" -> "java.lang.Long (java.base)";
   "me.lemire.longcompression.synth.LongUniformDataGenerator" -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.synth.LongUniformDataGenerator" -> "java.lang.RuntimeException (java.base)";
   "me.lemire.longcompression.synth.LongUniformDataGenerator" -> "java.lang.String (java.base)";
   "me.lemire.longcompression.synth.LongUniformDataGenerator" -> "java.util.Arrays (java.base)";
   "me.lemire.longcompression.synth.LongUniformDataGenerator" -> "java.util.HashSet (java.base)";
   "me.lemire.longcompression.synth.LongUniformDataGenerator" -> "java.util.Iterator (java.base)";
   "me.lemire.longcompression.synth.LongUniformDataGenerator" -> "java.util.Random (java.base)";
   "me.lemire.longcompression.synth.LongUniformDataGenerator" -> "java.util.Set (java.base)";
}
