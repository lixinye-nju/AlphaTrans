{
    "ByteBasicTest": [
        [
            "ByteIntegerCODEC",
            "me.lemire.integercompression.ByteIntegerCODEC"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "TestUtils",
            "me.lemire.integercompression.TestUtils"
        ],
        [
            "VariableByte",
            "me.lemire.integercompression.VariableByte"
        ],
        [
            "IntegratedVariableByte",
            "me.lemire.integercompression.differential.IntegratedVariableByte"
        ]
    ],
    "XorBinaryPackingTest": [
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "TestUtils",
            "me.lemire.integercompression.TestUtils"
        ],
        [
            "XorBinaryPacking",
            "me.lemire.integercompression.differential.XorBinaryPacking"
        ]
    ],
    "SkippableBasicTest": [
        [
            "BinaryPacking",
            "me.lemire.integercompression.BinaryPacking"
        ],
        [
            "FastPFOR",
            "me.lemire.integercompression.FastPFOR"
        ],
        [
            "FastPFOR128",
            "me.lemire.integercompression.FastPFOR128"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "JustCopy",
            "me.lemire.integercompression.JustCopy"
        ],
        [
            "NewPFD",
            "me.lemire.integercompression.NewPFD"
        ],
        [
            "NewPFDS16",
            "me.lemire.integercompression.NewPFDS16"
        ],
        [
            "NewPFDS9",
            "me.lemire.integercompression.NewPFDS9"
        ],
        [
            "OptPFD",
            "me.lemire.integercompression.OptPFD"
        ],
        [
            "OptPFDS16",
            "me.lemire.integercompression.OptPFDS16"
        ],
        [
            "OptPFDS9",
            "me.lemire.integercompression.OptPFDS9"
        ],
        [
            "Simple16",
            "me.lemire.integercompression.Simple16"
        ],
        [
            "Simple9",
            "me.lemire.integercompression.Simple9"
        ],
        [
            "SkippableComposition",
            "me.lemire.integercompression.SkippableComposition"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "TestUtils",
            "me.lemire.integercompression.TestUtils"
        ],
        [
            "VariableByte",
            "me.lemire.integercompression.VariableByte"
        ]
    ],
    "BoundaryTest": [
        [
            "BinaryPacking",
            "me.lemire.integercompression.BinaryPacking"
        ],
        [
            "Composition",
            "me.lemire.integercompression.Composition"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "VariableByte",
            "me.lemire.integercompression.VariableByte"
        ],
        [
            "IntegratedBinaryPacking",
            "me.lemire.integercompression.differential.IntegratedBinaryPacking"
        ],
        [
            "IntegratedComposition",
            "me.lemire.integercompression.differential.IntegratedComposition"
        ],
        [
            "IntegratedIntegerCODEC",
            "me.lemire.integercompression.differential.IntegratedIntegerCODEC"
        ],
        [
            "IntegratedVariableByte",
            "me.lemire.integercompression.differential.IntegratedVariableByte"
        ]
    ],
    "DeltaZigzagEncodingTest": [
        [
            "DeltaZigzagEncoding",
            "me.lemire.integercompression.DeltaZigzagEncoding"
        ]
    ],
    "BasicTest": [
        [
            "BinaryPacking",
            "me.lemire.integercompression.BinaryPacking"
        ],
        [
            "BitPacking",
            "me.lemire.integercompression.BitPacking"
        ],
        [
            "Composition",
            "me.lemire.integercompression.Composition"
        ],
        [
            "DeltaZigzagBinaryPacking",
            "me.lemire.integercompression.DeltaZigzagBinaryPacking"
        ],
        [
            "DeltaZigzagVariableByte",
            "me.lemire.integercompression.DeltaZigzagVariableByte"
        ],
        [
            "FastPFOR",
            "me.lemire.integercompression.FastPFOR"
        ],
        [
            "FastPFOR128",
            "me.lemire.integercompression.FastPFOR128"
        ],
        [
            "GroupSimple9",
            "me.lemire.integercompression.GroupSimple9"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "JustCopy",
            "me.lemire.integercompression.JustCopy"
        ],
        [
            "NewPFD",
            "me.lemire.integercompression.NewPFD"
        ],
        [
            "NewPFDS16",
            "me.lemire.integercompression.NewPFDS16"
        ],
        [
            "NewPFDS9",
            "me.lemire.integercompression.NewPFDS9"
        ],
        [
            "OptPFD",
            "me.lemire.integercompression.OptPFD"
        ],
        [
            "OptPFDS16",
            "me.lemire.integercompression.OptPFDS16"
        ],
        [
            "OptPFDS9",
            "me.lemire.integercompression.OptPFDS9"
        ],
        [
            "Simple16",
            "me.lemire.integercompression.Simple16"
        ],
        [
            "Simple9",
            "me.lemire.integercompression.Simple9"
        ],
        [
            "TestUtils",
            "me.lemire.integercompression.TestUtils"
        ],
        [
            "VariableByte",
            "me.lemire.integercompression.VariableByte"
        ],
        [
            "Delta",
            "me.lemire.integercompression.differential.Delta"
        ],
        [
            "IntegratedBinaryPacking",
            "me.lemire.integercompression.differential.IntegratedBinaryPacking"
        ],
        [
            "IntegratedComposition",
            "me.lemire.integercompression.differential.IntegratedComposition"
        ],
        [
            "IntegratedIntegerCODEC",
            "me.lemire.integercompression.differential.IntegratedIntegerCODEC"
        ],
        [
            "IntegratedVariableByte",
            "me.lemire.integercompression.differential.IntegratedVariableByte"
        ],
        [
            "XorBinaryPacking",
            "me.lemire.integercompression.differential.XorBinaryPacking"
        ],
        [
            "ClusteredDataGenerator",
            "me.lemire.integercompression.synth.ClusteredDataGenerator"
        ]
    ],
    "IntCompressorTest": [
        [
            "BinaryPacking",
            "me.lemire.integercompression.BinaryPacking"
        ],
        [
            "IntCompressor",
            "me.lemire.integercompression.IntCompressor"
        ],
        [
            "SkippableComposition",
            "me.lemire.integercompression.SkippableComposition"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "VariableByte",
            "me.lemire.integercompression.VariableByte"
        ],
        [
            "IntegratedBinaryPacking",
            "me.lemire.integercompression.differential.IntegratedBinaryPacking"
        ],
        [
            "IntegratedIntCompressor",
            "me.lemire.integercompression.differential.IntegratedIntCompressor"
        ],
        [
            "IntegratedVariableByte",
            "me.lemire.integercompression.differential.IntegratedVariableByte"
        ],
        [
            "SkippableIntegratedComposition",
            "me.lemire.integercompression.differential.SkippableIntegratedComposition"
        ],
        [
            "SkippableIntegratedIntegerCODEC",
            "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC"
        ]
    ],
    "ResourcedTest": [
        [
            "BinaryPacking",
            "me.lemire.integercompression.BinaryPacking"
        ],
        [
            "FastPFOR",
            "me.lemire.integercompression.FastPFOR"
        ],
        [
            "FastPFOR128",
            "me.lemire.integercompression.FastPFOR128"
        ],
        [
            "IntCompressor",
            "me.lemire.integercompression.IntCompressor"
        ],
        [
            "JustCopy",
            "me.lemire.integercompression.JustCopy"
        ],
        [
            "NewPFD",
            "me.lemire.integercompression.NewPFD"
        ],
        [
            "NewPFDS16",
            "me.lemire.integercompression.NewPFDS16"
        ],
        [
            "NewPFDS9",
            "me.lemire.integercompression.NewPFDS9"
        ],
        [
            "OptPFD",
            "me.lemire.integercompression.OptPFD"
        ],
        [
            "OptPFDS16",
            "me.lemire.integercompression.OptPFDS16"
        ],
        [
            "OptPFDS9",
            "me.lemire.integercompression.OptPFDS9"
        ],
        [
            "Simple16",
            "me.lemire.integercompression.Simple16"
        ],
        [
            "Simple9",
            "me.lemire.integercompression.Simple9"
        ],
        [
            "SkippableComposition",
            "me.lemire.integercompression.SkippableComposition"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "VariableByte",
            "me.lemire.integercompression.VariableByte"
        ],
        [
            "IntegratedIntCompressor",
            "me.lemire.integercompression.differential.IntegratedIntCompressor"
        ],
        [
            "SkippableIntegratedIntegerCODEC",
            "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC"
        ]
    ],
    "ExampleTest": [
        [
            "BinaryPacking",
            "me.lemire.integercompression.BinaryPacking"
        ],
        [
            "Composition",
            "me.lemire.integercompression.Composition"
        ],
        [
            "FastPFOR",
            "me.lemire.integercompression.FastPFOR"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "SkippableComposition",
            "me.lemire.integercompression.SkippableComposition"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "VariableByte",
            "me.lemire.integercompression.VariableByte"
        ],
        [
            "IntegratedBinaryPacking",
            "me.lemire.integercompression.differential.IntegratedBinaryPacking"
        ],
        [
            "IntegratedComposition",
            "me.lemire.integercompression.differential.IntegratedComposition"
        ],
        [
            "IntegratedIntCompressor",
            "me.lemire.integercompression.differential.IntegratedIntCompressor"
        ],
        [
            "IntegratedIntegerCODEC",
            "me.lemire.integercompression.differential.IntegratedIntegerCODEC"
        ],
        [
            "IntegratedVariableByte",
            "me.lemire.integercompression.differential.IntegratedVariableByte"
        ],
        [
            "SkippableIntegratedComposition",
            "me.lemire.integercompression.differential.SkippableIntegratedComposition"
        ],
        [
            "SkippableIntegratedIntegerCODEC",
            "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC"
        ]
    ],
    "AdhocTest": [
        [
            "BinaryPacking",
            "me.lemire.integercompression.BinaryPacking"
        ],
        [
            "Composition",
            "me.lemire.integercompression.Composition"
        ],
        [
            "FastPFOR",
            "me.lemire.integercompression.FastPFOR"
        ],
        [
            "FastPFOR128",
            "me.lemire.integercompression.FastPFOR128"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "SkippableComposition",
            "me.lemire.integercompression.SkippableComposition"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "TestUtils",
            "me.lemire.integercompression.TestUtils"
        ],
        [
            "VariableByte",
            "me.lemire.integercompression.VariableByte"
        ],
        [
            "IntegratedBinaryPacking",
            "me.lemire.integercompression.differential.IntegratedBinaryPacking"
        ],
        [
            "IntegratedVariableByte",
            "me.lemire.integercompression.differential.IntegratedVariableByte"
        ],
        [
            "SkippableIntegratedComposition",
            "me.lemire.integercompression.differential.SkippableIntegratedComposition"
        ],
        [
            "SkippableIntegratedIntegerCODEC",
            "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC"
        ]
    ],
    "TestUtils": [
        [
            "ByteIntegerCODEC",
            "me.lemire.integercompression.ByteIntegerCODEC"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "Util",
            "me.lemire.integercompression.Util"
        ]
    ],
    "LongTestUtils": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "ByteLongCODEC",
            "me.lemire.longcompression.ByteLongCODEC"
        ],
        [
            "LongCODEC",
            "me.lemire.longcompression.LongCODEC"
        ],
        [
            "SkippableLongCODEC",
            "me.lemire.longcompression.SkippableLongCODEC"
        ]
    ],
    "SkippableLongBasicTest": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "LongJustCopy",
            "me.lemire.longcompression.LongJustCopy"
        ],
        [
            "LongTestUtils",
            "me.lemire.longcompression.LongTestUtils"
        ],
        [
            "LongVariableByte",
            "me.lemire.longcompression.LongVariableByte"
        ],
        [
            "SkippableLongCODEC",
            "me.lemire.longcompression.SkippableLongCODEC"
        ]
    ],
    "TestLongAs2IntsCodec": [
        [
            "ByteLongCODEC",
            "me.lemire.longcompression.ByteLongCODEC"
        ],
        [
            "LongAs2IntsCodec",
            "me.lemire.longcompression.LongAs2IntsCodec"
        ],
        [
            "LongCODEC",
            "me.lemire.longcompression.LongCODEC"
        ],
        [
            "LongTestUtils",
            "me.lemire.longcompression.LongTestUtils"
        ],
        [
            "SkippableLongCODEC",
            "me.lemire.longcompression.SkippableLongCODEC"
        ]
    ],
    "TestLongVariableByte": [
        [
            "ByteLongCODEC",
            "me.lemire.longcompression.ByteLongCODEC"
        ],
        [
            "LongCODEC",
            "me.lemire.longcompression.LongCODEC"
        ],
        [
            "LongTestUtils",
            "me.lemire.longcompression.LongTestUtils"
        ],
        [
            "LongVariableByte",
            "me.lemire.longcompression.LongVariableByte"
        ],
        [
            "SkippableLongCODEC",
            "me.lemire.longcompression.SkippableLongCODEC"
        ]
    ],
    "LongBasicTest": [
        [
            "FastPFOR",
            "me.lemire.integercompression.FastPFOR"
        ],
        [
            "FastPFOR128",
            "me.lemire.integercompression.FastPFOR128"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegratedLongCODEC",
            "me.lemire.longcompression.IntegratedLongCODEC"
        ],
        [
            "LongAs2IntsCodec",
            "me.lemire.longcompression.LongAs2IntsCodec"
        ],
        [
            "LongCODEC",
            "me.lemire.longcompression.LongCODEC"
        ],
        [
            "LongJustCopy",
            "me.lemire.longcompression.LongJustCopy"
        ],
        [
            "LongTestUtils",
            "me.lemire.longcompression.LongTestUtils"
        ],
        [
            "LongVariableByte",
            "me.lemire.longcompression.LongVariableByte"
        ],
        [
            "LongDelta",
            "me.lemire.longcompression.differential.LongDelta"
        ]
    ],
    "LongUniformDataGenerator": [],
    "LongClusteredDataGenerator": [
        [
            "LongUniformDataGenerator",
            "me.lemire.longcompression.synth.LongUniformDataGenerator"
        ]
    ],
    "module-info": [],
    "GroupSimple9": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "Util",
            "me.lemire.integercompression.Util"
        ]
    ],
    "Simple16": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ]
    ],
    "UncompressibleInputException": [],
    "IntCompressor": [
        [
            "BinaryPacking",
            "me.lemire.integercompression.BinaryPacking"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "SkippableComposition",
            "me.lemire.integercompression.SkippableComposition"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "UncompressibleInputException",
            "me.lemire.integercompression.UncompressibleInputException"
        ],
        [
            "VariableByte",
            "me.lemire.integercompression.VariableByte"
        ]
    ],
    "Simple9": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ]
    ],
    "DeltaZigzagBinaryPacking": [
        [
            "BitPacking",
            "me.lemire.integercompression.BitPacking"
        ],
        [
            "DeltaZigzagEncoding",
            "me.lemire.integercompression.DeltaZigzagEncoding"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "Util",
            "me.lemire.integercompression.Util"
        ]
    ],
    "OptPFD": [
        [
            "BitPacking",
            "me.lemire.integercompression.BitPacking"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "S16",
            "me.lemire.integercompression.S16"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "Util",
            "me.lemire.integercompression.Util"
        ]
    ],
    "BinaryPacking": [
        [
            "BitPacking",
            "me.lemire.integercompression.BitPacking"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "Util",
            "me.lemire.integercompression.Util"
        ]
    ],
    "VariableByte": [
        [
            "ByteIntegerCODEC",
            "me.lemire.integercompression.ByteIntegerCODEC"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ]
    ],
    "DeltaZigzagEncoding": [],
    "DeltaZigzagVariableByte": [
        [
            "DeltaZigzagEncoding",
            "me.lemire.integercompression.DeltaZigzagEncoding"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ]
    ],
    "FastPFOR": [
        [
            "BitPacking",
            "me.lemire.integercompression.BitPacking"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "Util",
            "me.lemire.integercompression.Util"
        ]
    ],
    "ByteIntegerCODEC": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ]
    ],
    "OptPFDS16": [
        [
            "BitPacking",
            "me.lemire.integercompression.BitPacking"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "S16",
            "me.lemire.integercompression.S16"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "Util",
            "me.lemire.integercompression.Util"
        ]
    ],
    "Kamikaze": [
        [
            "PForDelta",
            "com.kamikaze.pfordelta.PForDelta"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "Util",
            "me.lemire.integercompression.Util"
        ]
    ],
    "JustCopy": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ]
    ],
    "NewPFDS16": [
        [
            "BitPacking",
            "me.lemire.integercompression.BitPacking"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "S16",
            "me.lemire.integercompression.S16"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "Util",
            "me.lemire.integercompression.Util"
        ]
    ],
    "Util": [],
    "SkippableIntegerCODEC": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ]
    ],
    "S16": [],
    "IntWrapper": [],
    "Composition": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ]
    ],
    "S9": [
        [
            "Util",
            "me.lemire.integercompression.Util"
        ]
    ],
    "SkippableComposition": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ]
    ],
    "IntegerCODEC": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ]
    ],
    "BitPacking": [],
    "OptPFDS9": [
        [
            "BitPacking",
            "me.lemire.integercompression.BitPacking"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "S9",
            "me.lemire.integercompression.S9"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "Util",
            "me.lemire.integercompression.Util"
        ]
    ],
    "FastPFOR128": [
        [
            "BitPacking",
            "me.lemire.integercompression.BitPacking"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "Util",
            "me.lemire.integercompression.Util"
        ]
    ],
    "NewPFD": [
        [
            "BitPacking",
            "me.lemire.integercompression.BitPacking"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "S16",
            "me.lemire.integercompression.S16"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "Util",
            "me.lemire.integercompression.Util"
        ]
    ],
    "NewPFDS9": [
        [
            "BitPacking",
            "me.lemire.integercompression.BitPacking"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "S9",
            "me.lemire.integercompression.S9"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "Util",
            "me.lemire.integercompression.Util"
        ]
    ],
    "BenchmarkCSV": [
        [
            "BinaryPacking",
            "me.lemire.integercompression.BinaryPacking"
        ],
        [
            "ByteIntegerCODEC",
            "me.lemire.integercompression.ByteIntegerCODEC"
        ],
        [
            "Composition",
            "me.lemire.integercompression.Composition"
        ],
        [
            "FastPFOR",
            "me.lemire.integercompression.FastPFOR"
        ],
        [
            "FastPFOR128",
            "me.lemire.integercompression.FastPFOR128"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "VariableByte",
            "me.lemire.integercompression.VariableByte"
        ],
        [
            "IntegratedBinaryPacking",
            "me.lemire.integercompression.differential.IntegratedBinaryPacking"
        ],
        [
            "IntegratedByteIntegerCODEC",
            "me.lemire.integercompression.differential.IntegratedByteIntegerCODEC"
        ],
        [
            "IntegratedComposition",
            "me.lemire.integercompression.differential.IntegratedComposition"
        ],
        [
            "IntegratedIntegerCODEC",
            "me.lemire.integercompression.differential.IntegratedIntegerCODEC"
        ],
        [
            "IntegratedVariableByte",
            "me.lemire.integercompression.differential.IntegratedVariableByte"
        ]
    ],
    "BenchmarkOffsettedSeries": [
        [
            "BinaryPacking",
            "me.lemire.integercompression.BinaryPacking"
        ],
        [
            "DeltaZigzagBinaryPacking",
            "me.lemire.integercompression.DeltaZigzagBinaryPacking"
        ],
        [
            "DeltaZigzagVariableByte",
            "me.lemire.integercompression.DeltaZigzagVariableByte"
        ],
        [
            "FastPFOR",
            "me.lemire.integercompression.FastPFOR"
        ],
        [
            "FastPFOR128",
            "me.lemire.integercompression.FastPFOR128"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "JustCopy",
            "me.lemire.integercompression.JustCopy"
        ],
        [
            "PerformanceLogger",
            "me.lemire.integercompression.benchmarktools.PerformanceLogger"
        ],
        [
            "IntegratedBinaryPacking",
            "me.lemire.integercompression.differential.IntegratedBinaryPacking"
        ],
        [
            "XorBinaryPacking",
            "me.lemire.integercompression.differential.XorBinaryPacking"
        ]
    ],
    "Benchmark": [
        [
            "PForDelta",
            "com.kamikaze.pfordelta.PForDelta"
        ],
        [
            "BinaryPacking",
            "me.lemire.integercompression.BinaryPacking"
        ],
        [
            "ByteIntegerCODEC",
            "me.lemire.integercompression.ByteIntegerCODEC"
        ],
        [
            "Composition",
            "me.lemire.integercompression.Composition"
        ],
        [
            "DeltaZigzagBinaryPacking",
            "me.lemire.integercompression.DeltaZigzagBinaryPacking"
        ],
        [
            "DeltaZigzagVariableByte",
            "me.lemire.integercompression.DeltaZigzagVariableByte"
        ],
        [
            "FastPFOR",
            "me.lemire.integercompression.FastPFOR"
        ],
        [
            "FastPFOR128",
            "me.lemire.integercompression.FastPFOR128"
        ],
        [
            "GroupSimple9",
            "me.lemire.integercompression.GroupSimple9"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "JustCopy",
            "me.lemire.integercompression.JustCopy"
        ],
        [
            "NewPFD",
            "me.lemire.integercompression.NewPFD"
        ],
        [
            "NewPFDS16",
            "me.lemire.integercompression.NewPFDS16"
        ],
        [
            "NewPFDS9",
            "me.lemire.integercompression.NewPFDS9"
        ],
        [
            "OptPFD",
            "me.lemire.integercompression.OptPFD"
        ],
        [
            "OptPFDS16",
            "me.lemire.integercompression.OptPFDS16"
        ],
        [
            "OptPFDS9",
            "me.lemire.integercompression.OptPFDS9"
        ],
        [
            "Simple16",
            "me.lemire.integercompression.Simple16"
        ],
        [
            "Simple9",
            "me.lemire.integercompression.Simple9"
        ],
        [
            "VariableByte",
            "me.lemire.integercompression.VariableByte"
        ],
        [
            "Delta",
            "me.lemire.integercompression.differential.Delta"
        ],
        [
            "IntegratedBinaryPacking",
            "me.lemire.integercompression.differential.IntegratedBinaryPacking"
        ],
        [
            "IntegratedByteIntegerCODEC",
            "me.lemire.integercompression.differential.IntegratedByteIntegerCODEC"
        ],
        [
            "IntegratedComposition",
            "me.lemire.integercompression.differential.IntegratedComposition"
        ],
        [
            "IntegratedIntegerCODEC",
            "me.lemire.integercompression.differential.IntegratedIntegerCODEC"
        ],
        [
            "IntegratedVariableByte",
            "me.lemire.integercompression.differential.IntegratedVariableByte"
        ],
        [
            "XorBinaryPacking",
            "me.lemire.integercompression.differential.XorBinaryPacking"
        ],
        [
            "ClusteredDataGenerator",
            "me.lemire.integercompression.synth.ClusteredDataGenerator"
        ]
    ],
    "PerformanceLogger": [],
    "BenchmarkBitPacking": [
        [
            "BitPacking",
            "me.lemire.integercompression.BitPacking"
        ],
        [
            "Delta",
            "me.lemire.integercompression.differential.Delta"
        ],
        [
            "IntegratedBitPacking",
            "me.lemire.integercompression.differential.IntegratedBitPacking"
        ]
    ],
    "BenchmarkSkippable": [
        [
            "BinaryPacking",
            "me.lemire.integercompression.BinaryPacking"
        ],
        [
            "FastPFOR",
            "me.lemire.integercompression.FastPFOR"
        ],
        [
            "FastPFOR128",
            "me.lemire.integercompression.FastPFOR128"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "JustCopy",
            "me.lemire.integercompression.JustCopy"
        ],
        [
            "NewPFD",
            "me.lemire.integercompression.NewPFD"
        ],
        [
            "NewPFDS16",
            "me.lemire.integercompression.NewPFDS16"
        ],
        [
            "NewPFDS9",
            "me.lemire.integercompression.NewPFDS9"
        ],
        [
            "OptPFD",
            "me.lemire.integercompression.OptPFD"
        ],
        [
            "OptPFDS16",
            "me.lemire.integercompression.OptPFDS16"
        ],
        [
            "OptPFDS9",
            "me.lemire.integercompression.OptPFDS9"
        ],
        [
            "Simple16",
            "me.lemire.integercompression.Simple16"
        ],
        [
            "Simple9",
            "me.lemire.integercompression.Simple9"
        ],
        [
            "SkippableComposition",
            "me.lemire.integercompression.SkippableComposition"
        ],
        [
            "SkippableIntegerCODEC",
            "me.lemire.integercompression.SkippableIntegerCODEC"
        ],
        [
            "VariableByte",
            "me.lemire.integercompression.VariableByte"
        ],
        [
            "Delta",
            "me.lemire.integercompression.differential.Delta"
        ],
        [
            "IntegratedBinaryPacking",
            "me.lemire.integercompression.differential.IntegratedBinaryPacking"
        ],
        [
            "IntegratedVariableByte",
            "me.lemire.integercompression.differential.IntegratedVariableByte"
        ],
        [
            "SkippableIntegratedComposition",
            "me.lemire.integercompression.differential.SkippableIntegratedComposition"
        ],
        [
            "SkippableIntegratedIntegerCODEC",
            "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC"
        ],
        [
            "ClusteredDataGenerator",
            "me.lemire.integercompression.synth.ClusteredDataGenerator"
        ]
    ],
    "VectorBitPackerTerse": [],
    "VectorFastPFOR": [],
    "VectorBitPacker": [],
    "UniformDataGenerator": [],
    "ClusteredDataGenerator": [
        [
            "UniformDataGenerator",
            "me.lemire.integercompression.synth.UniformDataGenerator"
        ]
    ],
    "IntegratedBinaryPacking": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "Util",
            "me.lemire.integercompression.Util"
        ],
        [
            "IntegratedBitPacking",
            "me.lemire.integercompression.differential.IntegratedBitPacking"
        ],
        [
            "IntegratedIntegerCODEC",
            "me.lemire.integercompression.differential.IntegratedIntegerCODEC"
        ],
        [
            "SkippableIntegratedIntegerCODEC",
            "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC"
        ]
    ],
    "XorBinaryPacking": [
        [
            "BitPacking",
            "me.lemire.integercompression.BitPacking"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegratedIntegerCODEC",
            "me.lemire.integercompression.differential.IntegratedIntegerCODEC"
        ]
    ],
    "IntegratedIntCompressor": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "UncompressibleInputException",
            "me.lemire.integercompression.UncompressibleInputException"
        ],
        [
            "IntegratedBinaryPacking",
            "me.lemire.integercompression.differential.IntegratedBinaryPacking"
        ],
        [
            "IntegratedVariableByte",
            "me.lemire.integercompression.differential.IntegratedVariableByte"
        ],
        [
            "SkippableIntegratedComposition",
            "me.lemire.integercompression.differential.SkippableIntegratedComposition"
        ],
        [
            "SkippableIntegratedIntegerCODEC",
            "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC"
        ]
    ],
    "Delta": [],
    "SkippableIntegratedIntegerCODEC": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ]
    ],
    "IntegratedComposition": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegratedIntegerCODEC",
            "me.lemire.integercompression.differential.IntegratedIntegerCODEC"
        ]
    ],
    "IntegratedVariableByte": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegratedByteIntegerCODEC",
            "me.lemire.integercompression.differential.IntegratedByteIntegerCODEC"
        ],
        [
            "IntegratedIntegerCODEC",
            "me.lemire.integercompression.differential.IntegratedIntegerCODEC"
        ],
        [
            "SkippableIntegratedIntegerCODEC",
            "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC"
        ]
    ],
    "SkippableIntegratedComposition": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "SkippableIntegratedIntegerCODEC",
            "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC"
        ]
    ],
    "IntegratedIntegerCODEC": [
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ]
    ],
    "IntegratedByteIntegerCODEC": [
        [
            "ByteIntegerCODEC",
            "me.lemire.integercompression.ByteIntegerCODEC"
        ]
    ],
    "IntegratedBitPacking": [],
    "LongVariableByte": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "ByteLongCODEC",
            "me.lemire.longcompression.ByteLongCODEC"
        ],
        [
            "LongCODEC",
            "me.lemire.longcompression.LongCODEC"
        ],
        [
            "SkippableLongCODEC",
            "me.lemire.longcompression.SkippableLongCODEC"
        ]
    ],
    "RoaringIntPacking": [],
    "IntegratedLongCODEC": [
        [
            "LongCODEC",
            "me.lemire.longcompression.LongCODEC"
        ]
    ],
    "SkippableLongCODEC": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ]
    ],
    "LongJustCopy": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "LongCODEC",
            "me.lemire.longcompression.LongCODEC"
        ],
        [
            "SkippableLongCODEC",
            "me.lemire.longcompression.SkippableLongCODEC"
        ]
    ],
    "ByteLongCODEC": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ]
    ],
    "SkippableLongComposition": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "SkippableLongCODEC",
            "me.lemire.longcompression.SkippableLongCODEC"
        ]
    ],
    "LongCODEC": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ]
    ],
    "LongAs2IntsCodec": [
        [
            "BinaryPacking",
            "me.lemire.integercompression.BinaryPacking"
        ],
        [
            "Composition",
            "me.lemire.integercompression.Composition"
        ],
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "IntegerCODEC",
            "me.lemire.integercompression.IntegerCODEC"
        ],
        [
            "VariableByte",
            "me.lemire.integercompression.VariableByte"
        ],
        [
            "LongCODEC",
            "me.lemire.longcompression.LongCODEC"
        ],
        [
            "RoaringIntPacking",
            "me.lemire.longcompression.RoaringIntPacking"
        ]
    ],
    "LongComposition": [
        [
            "IntWrapper",
            "me.lemire.integercompression.IntWrapper"
        ],
        [
            "LongCODEC",
            "me.lemire.longcompression.LongCODEC"
        ]
    ],
    "LongUtil": [],
    "LongDelta": [],
    "PForDeltaUnpack128": [],
    "PForDelta": [
        [
            "PForDeltaUnpack128",
            "com.kamikaze.pfordelta.PForDeltaUnpack128"
        ],
        [
            "Simple16",
            "com.kamikaze.pfordelta.Simple16"
        ]
    ],
    "LCPForDelta": [
        [
            "PForDeltaUnpack128",
            "com.kamikaze.pfordelta.PForDeltaUnpack128"
        ],
        [
            "PForDeltaUnpack128WIthIntBuffer",
            "com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer"
        ],
        [
            "Simple16",
            "com.kamikaze.pfordelta.Simple16"
        ],
        [
            "Simple16WithHardCodes",
            "com.kamikaze.pfordelta.Simple16WithHardCodes"
        ]
    ],
    "PForDeltaUnpack128WIthIntBuffer": [],
    "Simple16WithHardCodes": []
}