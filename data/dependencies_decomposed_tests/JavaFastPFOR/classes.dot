digraph "classes" {
    // Path: java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/target/classes
   "com.kamikaze.pfordelta.LCPForDelta"               -> "com.kamikaze.pfordelta.PForDeltaUnpack128 (classes)";
   "com.kamikaze.pfordelta.LCPForDelta"               -> "com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer (classes)";
   "com.kamikaze.pfordelta.LCPForDelta"               -> "com.kamikaze.pfordelta.Simple16 (classes)";
   "com.kamikaze.pfordelta.LCPForDelta"               -> "com.kamikaze.pfordelta.Simple16WithHardCodes (classes)";
   "com.kamikaze.pfordelta.LCPForDelta"               -> "java.lang.IllegalArgumentException (java.base)";
   "com.kamikaze.pfordelta.LCPForDelta"               -> "java.lang.Object (java.base)";
   "com.kamikaze.pfordelta.LCPForDelta"               -> "java.lang.System (java.base)";
   "com.kamikaze.pfordelta.LCPForDelta"               -> "java.nio.IntBuffer (java.base)";
   "com.kamikaze.pfordelta.LCPForDelta"               -> "java.util.Arrays (java.base)";
   "com.kamikaze.pfordelta.PForDelta"                 -> "com.kamikaze.pfordelta.PForDeltaUnpack128 (classes)";
   "com.kamikaze.pfordelta.PForDelta"                 -> "com.kamikaze.pfordelta.Simple16 (classes)";
   "com.kamikaze.pfordelta.PForDelta"                 -> "java.io.PrintStream (java.base)";
   "com.kamikaze.pfordelta.PForDelta"                 -> "java.lang.Object (java.base)";
   "com.kamikaze.pfordelta.PForDelta"                 -> "java.lang.String (java.base)";
   "com.kamikaze.pfordelta.PForDelta"                 -> "java.lang.StringBuilder (java.base)";
   "com.kamikaze.pfordelta.PForDelta"                 -> "java.lang.System (java.base)";
   "com.kamikaze.pfordelta.PForDelta"                 -> "java.util.Arrays (java.base)";
   "com.kamikaze.pfordelta.PForDeltaUnpack128"        -> "java.lang.Object (java.base)";
   "com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer" -> "java.lang.Object (java.base)";
   "com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer" -> "java.nio.IntBuffer (java.base)";
   "com.kamikaze.pfordelta.Simple16"                  -> "java.io.PrintStream (java.base)";
   "com.kamikaze.pfordelta.Simple16"                  -> "java.lang.Exception (java.base)";
   "com.kamikaze.pfordelta.Simple16"                  -> "java.lang.Object (java.base)";
   "com.kamikaze.pfordelta.Simple16"                  -> "java.lang.String (java.base)";
   "com.kamikaze.pfordelta.Simple16"                  -> "java.lang.StringBuilder (java.base)";
   "com.kamikaze.pfordelta.Simple16"                  -> "java.lang.System (java.base)";
   "com.kamikaze.pfordelta.Simple16WithHardCodes"     -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.BinaryPacking"       -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.BinaryPacking"       -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.BinaryPacking"       -> "java.lang.String (java.base)";
   "me.lemire.integercompression.BinaryPacking"       -> "me.lemire.integercompression.BitPacking (classes)";
   "me.lemire.integercompression.BinaryPacking"       -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.BinaryPacking"       -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.BinaryPacking"       -> "me.lemire.integercompression.SkippableIntegerCODEC (classes)";
   "me.lemire.integercompression.BinaryPacking"       -> "me.lemire.integercompression.Util (classes)";
   "me.lemire.integercompression.BitPacking"          -> "java.lang.IllegalArgumentException (java.base)";
   "me.lemire.integercompression.BitPacking"          -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.BitPacking"          -> "java.lang.String (java.base)";
   "me.lemire.integercompression.BitPacking"          -> "java.lang.System (java.base)";
   "me.lemire.integercompression.BitPacking"          -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.ByteIntegerCODEC"    -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.ByteIntegerCODEC"    -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.Composition"         -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.Composition"         -> "java.lang.String (java.base)";
   "me.lemire.integercompression.Composition"         -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.Composition"         -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.Composition"         -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.DeltaZigzagBinaryPacking" -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.DeltaZigzagBinaryPacking" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.DeltaZigzagBinaryPacking" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.DeltaZigzagBinaryPacking" -> "me.lemire.integercompression.BitPacking (classes)";
   "me.lemire.integercompression.DeltaZigzagBinaryPacking" -> "me.lemire.integercompression.DeltaZigzagEncoding (classes)";
   "me.lemire.integercompression.DeltaZigzagBinaryPacking" -> "me.lemire.integercompression.DeltaZigzagEncoding$Decoder (classes)";
   "me.lemire.integercompression.DeltaZigzagBinaryPacking" -> "me.lemire.integercompression.DeltaZigzagEncoding$Encoder (classes)";
   "me.lemire.integercompression.DeltaZigzagBinaryPacking" -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.DeltaZigzagBinaryPacking" -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.DeltaZigzagBinaryPacking" -> "me.lemire.integercompression.Util (classes)";
   "me.lemire.integercompression.DeltaZigzagEncoding" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.DeltaZigzagEncoding" -> "me.lemire.integercompression.DeltaZigzagEncoding$Context (classes)";
   "me.lemire.integercompression.DeltaZigzagEncoding" -> "me.lemire.integercompression.DeltaZigzagEncoding$Decoder (classes)";
   "me.lemire.integercompression.DeltaZigzagEncoding" -> "me.lemire.integercompression.DeltaZigzagEncoding$Encoder (classes)";
   "me.lemire.integercompression.DeltaZigzagEncoding$Context" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.DeltaZigzagEncoding$Context" -> "me.lemire.integercompression.DeltaZigzagEncoding (classes)";
   "me.lemire.integercompression.DeltaZigzagEncoding$Decoder" -> "me.lemire.integercompression.DeltaZigzagEncoding (classes)";
   "me.lemire.integercompression.DeltaZigzagEncoding$Decoder" -> "me.lemire.integercompression.DeltaZigzagEncoding$Context (classes)";
   "me.lemire.integercompression.DeltaZigzagEncoding$Encoder" -> "me.lemire.integercompression.DeltaZigzagEncoding (classes)";
   "me.lemire.integercompression.DeltaZigzagEncoding$Encoder" -> "me.lemire.integercompression.DeltaZigzagEncoding$Context (classes)";
   "me.lemire.integercompression.DeltaZigzagVariableByte" -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.DeltaZigzagVariableByte" -> "java.lang.Integer (java.base)";
   "me.lemire.integercompression.DeltaZigzagVariableByte" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.DeltaZigzagVariableByte" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.DeltaZigzagVariableByte" -> "java.nio.ByteBuffer (java.base)";
   "me.lemire.integercompression.DeltaZigzagVariableByte" -> "java.nio.IntBuffer (java.base)";
   "me.lemire.integercompression.DeltaZigzagVariableByte" -> "me.lemire.integercompression.DeltaZigzagEncoding (classes)";
   "me.lemire.integercompression.DeltaZigzagVariableByte" -> "me.lemire.integercompression.DeltaZigzagEncoding$Decoder (classes)";
   "me.lemire.integercompression.DeltaZigzagVariableByte" -> "me.lemire.integercompression.DeltaZigzagEncoding$Encoder (classes)";
   "me.lemire.integercompression.DeltaZigzagVariableByte" -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.DeltaZigzagVariableByte" -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.FastPFOR"            -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.FastPFOR"            -> "java.lang.Math (java.base)";
   "me.lemire.integercompression.FastPFOR"            -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.FastPFOR"            -> "java.lang.String (java.base)";
   "me.lemire.integercompression.FastPFOR"            -> "java.lang.System (java.base)";
   "me.lemire.integercompression.FastPFOR"            -> "java.nio.ByteBuffer (java.base)";
   "me.lemire.integercompression.FastPFOR"            -> "java.nio.ByteOrder (java.base)";
   "me.lemire.integercompression.FastPFOR"            -> "java.nio.IntBuffer (java.base)";
   "me.lemire.integercompression.FastPFOR"            -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.FastPFOR"            -> "me.lemire.integercompression.BitPacking (classes)";
   "me.lemire.integercompression.FastPFOR"            -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.FastPFOR"            -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.FastPFOR"            -> "me.lemire.integercompression.SkippableIntegerCODEC (classes)";
   "me.lemire.integercompression.FastPFOR"            -> "me.lemire.integercompression.Util (classes)";
   "me.lemire.integercompression.FastPFOR128"         -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.FastPFOR128"         -> "java.lang.Math (java.base)";
   "me.lemire.integercompression.FastPFOR128"         -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.FastPFOR128"         -> "java.lang.String (java.base)";
   "me.lemire.integercompression.FastPFOR128"         -> "java.lang.System (java.base)";
   "me.lemire.integercompression.FastPFOR128"         -> "java.nio.ByteBuffer (java.base)";
   "me.lemire.integercompression.FastPFOR128"         -> "java.nio.ByteOrder (java.base)";
   "me.lemire.integercompression.FastPFOR128"         -> "java.nio.IntBuffer (java.base)";
   "me.lemire.integercompression.FastPFOR128"         -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.FastPFOR128"         -> "me.lemire.integercompression.BitPacking (classes)";
   "me.lemire.integercompression.FastPFOR128"         -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.FastPFOR128"         -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.FastPFOR128"         -> "me.lemire.integercompression.SkippableIntegerCODEC (classes)";
   "me.lemire.integercompression.FastPFOR128"         -> "me.lemire.integercompression.Util (classes)";
   "me.lemire.integercompression.GroupSimple9"        -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.GroupSimple9"        -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.GroupSimple9"        -> "java.lang.RuntimeException (java.base)";
   "me.lemire.integercompression.GroupSimple9"        -> "java.lang.String (java.base)";
   "me.lemire.integercompression.GroupSimple9"        -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.GroupSimple9"        -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.GroupSimple9"        -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.GroupSimple9"        -> "me.lemire.integercompression.SkippableIntegerCODEC (classes)";
   "me.lemire.integercompression.GroupSimple9"        -> "me.lemire.integercompression.Util (classes)";
   "me.lemire.integercompression.IntCompressor"       -> "java.lang.IndexOutOfBoundsException (java.base)";
   "me.lemire.integercompression.IntCompressor"       -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.IntCompressor"       -> "java.lang.String (java.base)";
   "me.lemire.integercompression.IntCompressor"       -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.IntCompressor"       -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.IntCompressor"       -> "me.lemire.integercompression.BinaryPacking (classes)";
   "me.lemire.integercompression.IntCompressor"       -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.IntCompressor"       -> "me.lemire.integercompression.SkippableComposition (classes)";
   "me.lemire.integercompression.IntCompressor"       -> "me.lemire.integercompression.SkippableIntegerCODEC (classes)";
   "me.lemire.integercompression.IntCompressor"       -> "me.lemire.integercompression.UncompressibleInputException (classes)";
   "me.lemire.integercompression.IntCompressor"       -> "me.lemire.integercompression.VariableByte (classes)";
   "me.lemire.integercompression.IntWrapper"          -> "java.lang.Integer (java.base)";
   "me.lemire.integercompression.IntWrapper"          -> "java.lang.Number (java.base)";
   "me.lemire.integercompression.IntWrapper"          -> "java.lang.String (java.base)";
   "me.lemire.integercompression.IntegerCODEC"        -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.IntegerCODEC"        -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.JustCopy"            -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.JustCopy"            -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.JustCopy"            -> "java.lang.String (java.base)";
   "me.lemire.integercompression.JustCopy"            -> "java.lang.System (java.base)";
   "me.lemire.integercompression.JustCopy"            -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.JustCopy"            -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.JustCopy"            -> "me.lemire.integercompression.SkippableIntegerCODEC (classes)";
   "me.lemire.integercompression.Kamikaze"            -> "com.kamikaze.pfordelta.PForDelta (classes)";
   "me.lemire.integercompression.Kamikaze"            -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.Kamikaze"            -> "java.lang.String (java.base)";
   "me.lemire.integercompression.Kamikaze"            -> "java.lang.System (java.base)";
   "me.lemire.integercompression.Kamikaze"            -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.Kamikaze"            -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.Kamikaze"            -> "me.lemire.integercompression.SkippableIntegerCODEC (classes)";
   "me.lemire.integercompression.Kamikaze"            -> "me.lemire.integercompression.Util (classes)";
   "me.lemire.integercompression.NewPFD"              -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.NewPFD"              -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.NewPFD"              -> "java.lang.String (java.base)";
   "me.lemire.integercompression.NewPFD"              -> "me.lemire.integercompression.BitPacking (classes)";
   "me.lemire.integercompression.NewPFD"              -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.NewPFD"              -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.NewPFD"              -> "me.lemire.integercompression.S16 (classes)";
   "me.lemire.integercompression.NewPFD"              -> "me.lemire.integercompression.SkippableIntegerCODEC (classes)";
   "me.lemire.integercompression.NewPFD"              -> "me.lemire.integercompression.Util (classes)";
   "me.lemire.integercompression.NewPFDS16"           -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.NewPFDS16"           -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.NewPFDS16"           -> "java.lang.String (java.base)";
   "me.lemire.integercompression.NewPFDS16"           -> "me.lemire.integercompression.BitPacking (classes)";
   "me.lemire.integercompression.NewPFDS16"           -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.NewPFDS16"           -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.NewPFDS16"           -> "me.lemire.integercompression.S16 (classes)";
   "me.lemire.integercompression.NewPFDS16"           -> "me.lemire.integercompression.SkippableIntegerCODEC (classes)";
   "me.lemire.integercompression.NewPFDS16"           -> "me.lemire.integercompression.Util (classes)";
   "me.lemire.integercompression.NewPFDS9"            -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.NewPFDS9"            -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.NewPFDS9"            -> "java.lang.String (java.base)";
   "me.lemire.integercompression.NewPFDS9"            -> "me.lemire.integercompression.BitPacking (classes)";
   "me.lemire.integercompression.NewPFDS9"            -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.NewPFDS9"            -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.NewPFDS9"            -> "me.lemire.integercompression.S9 (classes)";
   "me.lemire.integercompression.NewPFDS9"            -> "me.lemire.integercompression.SkippableIntegerCODEC (classes)";
   "me.lemire.integercompression.NewPFDS9"            -> "me.lemire.integercompression.Util (classes)";
   "me.lemire.integercompression.OptPFD"              -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.OptPFD"              -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.OptPFD"              -> "java.lang.String (java.base)";
   "me.lemire.integercompression.OptPFD"              -> "me.lemire.integercompression.BitPacking (classes)";
   "me.lemire.integercompression.OptPFD"              -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.OptPFD"              -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.OptPFD"              -> "me.lemire.integercompression.S16 (classes)";
   "me.lemire.integercompression.OptPFD"              -> "me.lemire.integercompression.SkippableIntegerCODEC (classes)";
   "me.lemire.integercompression.OptPFD"              -> "me.lemire.integercompression.Util (classes)";
   "me.lemire.integercompression.OptPFDS16"           -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.OptPFDS16"           -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.OptPFDS16"           -> "java.lang.String (java.base)";
   "me.lemire.integercompression.OptPFDS16"           -> "me.lemire.integercompression.BitPacking (classes)";
   "me.lemire.integercompression.OptPFDS16"           -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.OptPFDS16"           -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.OptPFDS16"           -> "me.lemire.integercompression.S16 (classes)";
   "me.lemire.integercompression.OptPFDS16"           -> "me.lemire.integercompression.SkippableIntegerCODEC (classes)";
   "me.lemire.integercompression.OptPFDS16"           -> "me.lemire.integercompression.Util (classes)";
   "me.lemire.integercompression.OptPFDS9"            -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.OptPFDS9"            -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.OptPFDS9"            -> "java.lang.String (java.base)";
   "me.lemire.integercompression.OptPFDS9"            -> "me.lemire.integercompression.BitPacking (classes)";
   "me.lemire.integercompression.OptPFDS9"            -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.OptPFDS9"            -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.OptPFDS9"            -> "me.lemire.integercompression.S9 (classes)";
   "me.lemire.integercompression.OptPFDS9"            -> "me.lemire.integercompression.SkippableIntegerCODEC (classes)";
   "me.lemire.integercompression.OptPFDS9"            -> "me.lemire.integercompression.Util (classes)";
   "me.lemire.integercompression.S16"                 -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.S16"                 -> "java.lang.RuntimeException (java.base)";
   "me.lemire.integercompression.S16"                 -> "java.lang.String (java.base)";
   "me.lemire.integercompression.S9"                  -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.S9"                  -> "java.lang.RuntimeException (java.base)";
   "me.lemire.integercompression.S9"                  -> "java.lang.String (java.base)";
   "me.lemire.integercompression.S9"                  -> "me.lemire.integercompression.Util (classes)";
   "me.lemire.integercompression.Simple16"            -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.Simple16"            -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.Simple16"            -> "java.lang.RuntimeException (java.base)";
   "me.lemire.integercompression.Simple16"            -> "java.lang.String (java.base)";
   "me.lemire.integercompression.Simple16"            -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.Simple16"            -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.Simple16"            -> "me.lemire.integercompression.SkippableIntegerCODEC (classes)";
   "me.lemire.integercompression.Simple9"             -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.Simple9"             -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.Simple9"             -> "java.lang.RuntimeException (java.base)";
   "me.lemire.integercompression.Simple9"             -> "java.lang.String (java.base)";
   "me.lemire.integercompression.Simple9"             -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.Simple9"             -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.Simple9"             -> "me.lemire.integercompression.SkippableIntegerCODEC (classes)";
   "me.lemire.integercompression.SkippableComposition" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.SkippableComposition" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.SkippableComposition" -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.SkippableComposition" -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.SkippableComposition" -> "me.lemire.integercompression.SkippableIntegerCODEC (classes)";
   "me.lemire.integercompression.SkippableIntegerCODEC" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.SkippableIntegerCODEC" -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.UncompressibleInputException" -> "java.lang.RuntimeException (java.base)";
   "me.lemire.integercompression.UncompressibleInputException" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.Util"                -> "java.lang.Integer (java.base)";
   "me.lemire.integercompression.Util"                -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.Util"                -> "java.lang.System (java.base)";
   "me.lemire.integercompression.VariableByte"        -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.VariableByte"        -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.VariableByte"        -> "java.lang.String (java.base)";
   "me.lemire.integercompression.VariableByte"        -> "java.nio.ByteBuffer (java.base)";
   "me.lemire.integercompression.VariableByte"        -> "java.nio.ByteOrder (java.base)";
   "me.lemire.integercompression.VariableByte"        -> "java.nio.IntBuffer (java.base)";
   "me.lemire.integercompression.VariableByte"        -> "me.lemire.integercompression.ByteIntegerCODEC (classes)";
   "me.lemire.integercompression.VariableByte"        -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.VariableByte"        -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.VariableByte"        -> "me.lemire.integercompression.SkippableIntegerCODEC (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "com.kamikaze.pfordelta.PForDelta (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "java.io.File (java.base)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "java.io.FileNotFoundException (java.base)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "java.io.PrintStream (java.base)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "java.io.PrintWriter (java.base)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "java.lang.Double (java.base)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "java.lang.Integer (java.base)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "java.lang.Long (java.base)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "java.lang.RuntimeException (java.base)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "java.lang.System (java.base)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "java.lang.Throwable (java.base)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "java.text.DecimalFormat (java.base)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "java.util.ArrayList (java.base)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "java.util.Iterator (java.base)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.BinaryPacking (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.ByteIntegerCODEC (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.Composition (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.DeltaZigzagBinaryPacking (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.DeltaZigzagVariableByte (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.FastPFOR (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.FastPFOR128 (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.GroupSimple9 (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.JustCopy (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.NewPFD (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.NewPFDS16 (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.NewPFDS9 (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.OptPFD (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.OptPFDS16 (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.OptPFDS9 (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.Simple16 (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.Simple9 (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.VariableByte (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.differential.Delta (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.differential.IntegratedBinaryPacking (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.differential.IntegratedByteIntegerCODEC (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.differential.IntegratedComposition (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.differential.IntegratedIntegerCODEC (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.differential.IntegratedVariableByte (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.differential.XorBinaryPacking (classes)";
   "me.lemire.integercompression.benchmarktools.Benchmark" -> "me.lemire.integercompression.synth.ClusteredDataGenerator (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkBitPacking" -> "java.io.PrintStream (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkBitPacking" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkBitPacking" -> "java.lang.RuntimeException (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkBitPacking" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkBitPacking" -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkBitPacking" -> "java.lang.System (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkBitPacking" -> "java.text.DecimalFormat (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkBitPacking" -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkBitPacking" -> "java.util.Random (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkBitPacking" -> "me.lemire.integercompression.BitPacking (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkBitPacking" -> "me.lemire.integercompression.differential.Delta (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkBitPacking" -> "me.lemire.integercompression.differential.IntegratedBitPacking (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "java.io.BufferedReader (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "java.io.FileReader (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "java.io.IOException (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "java.io.PrintStream (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "java.io.Reader (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "java.lang.Double (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "java.lang.Integer (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "java.lang.NumberFormatException (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "java.lang.RuntimeException (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "java.lang.System (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "java.util.ArrayList (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "java.util.Iterator (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "me.lemire.integercompression.BinaryPacking (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "me.lemire.integercompression.ByteIntegerCODEC (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "me.lemire.integercompression.Composition (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "me.lemire.integercompression.FastPFOR (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "me.lemire.integercompression.FastPFOR128 (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "me.lemire.integercompression.VariableByte (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "me.lemire.integercompression.differential.IntegratedBinaryPacking (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "me.lemire.integercompression.differential.IntegratedByteIntegerCODEC (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "me.lemire.integercompression.differential.IntegratedComposition (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "me.lemire.integercompression.differential.IntegratedIntegerCODEC (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV" -> "me.lemire.integercompression.differential.IntegratedVariableByte (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode" -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode" -> "java.lang.Enum (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV$CompressionMode" -> "me.lemire.integercompression.benchmarktools.BenchmarkCSV (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format" -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format" -> "java.lang.Enum (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkCSV$Format" -> "me.lemire.integercompression.benchmarktools.BenchmarkCSV (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "java.io.File (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "java.io.PrintStream (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "java.io.PrintWriter (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "java.lang.Double (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "java.lang.Exception (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "java.lang.Integer (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "java.lang.Long (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "java.lang.Math (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "java.lang.RuntimeException (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "java.lang.System (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "java.lang.Throwable (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "java.util.Random (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "me.lemire.integercompression.BinaryPacking (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "me.lemire.integercompression.DeltaZigzagBinaryPacking (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "me.lemire.integercompression.DeltaZigzagVariableByte (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "me.lemire.integercompression.FastPFOR (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "me.lemire.integercompression.FastPFOR128 (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "me.lemire.integercompression.JustCopy (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "me.lemire.integercompression.benchmarktools.PerformanceLogger (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "me.lemire.integercompression.benchmarktools.PerformanceLogger$Timer (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "me.lemire.integercompression.differential.IntegratedBinaryPacking (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries" -> "me.lemire.integercompression.differential.XorBinaryPacking (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "java.io.File (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "java.io.FileNotFoundException (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "java.io.PrintStream (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "java.io.PrintWriter (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "java.lang.Double (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "java.lang.Integer (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "java.lang.Long (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "java.lang.Math (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "java.lang.RuntimeException (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "java.lang.System (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "java.lang.Throwable (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.BinaryPacking (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.FastPFOR (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.FastPFOR128 (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.JustCopy (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.NewPFD (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.NewPFDS16 (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.NewPFDS9 (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.OptPFD (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.OptPFDS16 (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.OptPFDS9 (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.Simple16 (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.Simple9 (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.SkippableComposition (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.SkippableIntegerCODEC (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.VariableByte (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.differential.Delta (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.differential.IntegratedBinaryPacking (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.differential.IntegratedVariableByte (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.differential.SkippableIntegratedComposition (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC (classes)";
   "me.lemire.integercompression.benchmarktools.BenchmarkSkippable" -> "me.lemire.integercompression.synth.ClusteredDataGenerator (classes)";
   "me.lemire.integercompression.benchmarktools.PerformanceLogger" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.benchmarktools.PerformanceLogger" -> "me.lemire.integercompression.benchmarktools.PerformanceLogger$Timer (classes)";
   "me.lemire.integercompression.benchmarktools.PerformanceLogger$Timer" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.benchmarktools.PerformanceLogger$Timer" -> "java.lang.System (java.base)";
   "me.lemire.integercompression.benchmarktools.PerformanceLogger$Timer" -> "me.lemire.integercompression.benchmarktools.PerformanceLogger (classes)";
   "me.lemire.integercompression.differential.Delta"  -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.differential.IntegratedBinaryPacking" -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.differential.IntegratedBinaryPacking" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.differential.IntegratedBinaryPacking" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.differential.IntegratedBinaryPacking" -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.differential.IntegratedBinaryPacking" -> "me.lemire.integercompression.Util (classes)";
   "me.lemire.integercompression.differential.IntegratedBinaryPacking" -> "me.lemire.integercompression.differential.IntegratedBitPacking (classes)";
   "me.lemire.integercompression.differential.IntegratedBinaryPacking" -> "me.lemire.integercompression.differential.IntegratedIntegerCODEC (classes)";
   "me.lemire.integercompression.differential.IntegratedBinaryPacking" -> "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC (classes)";
   "me.lemire.integercompression.differential.IntegratedBitPacking" -> "java.lang.IllegalArgumentException (java.base)";
   "me.lemire.integercompression.differential.IntegratedBitPacking" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.differential.IntegratedBitPacking" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.differential.IntegratedBitPacking" -> "java.lang.System (java.base)";
   "me.lemire.integercompression.differential.IntegratedBitPacking" -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.differential.IntegratedByteIntegerCODEC" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.differential.IntegratedByteIntegerCODEC" -> "me.lemire.integercompression.ByteIntegerCODEC (classes)";
   "me.lemire.integercompression.differential.IntegratedComposition" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.differential.IntegratedComposition" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.differential.IntegratedComposition" -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.differential.IntegratedComposition" -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.differential.IntegratedComposition" -> "me.lemire.integercompression.differential.IntegratedIntegerCODEC (classes)";
   "me.lemire.integercompression.differential.IntegratedIntCompressor" -> "java.lang.IndexOutOfBoundsException (java.base)";
   "me.lemire.integercompression.differential.IntegratedIntCompressor" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.differential.IntegratedIntCompressor" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.differential.IntegratedIntCompressor" -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.differential.IntegratedIntCompressor" -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.differential.IntegratedIntCompressor" -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.differential.IntegratedIntCompressor" -> "me.lemire.integercompression.UncompressibleInputException (classes)";
   "me.lemire.integercompression.differential.IntegratedIntCompressor" -> "me.lemire.integercompression.differential.IntegratedBinaryPacking (classes)";
   "me.lemire.integercompression.differential.IntegratedIntCompressor" -> "me.lemire.integercompression.differential.IntegratedVariableByte (classes)";
   "me.lemire.integercompression.differential.IntegratedIntCompressor" -> "me.lemire.integercompression.differential.SkippableIntegratedComposition (classes)";
   "me.lemire.integercompression.differential.IntegratedIntCompressor" -> "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC (classes)";
   "me.lemire.integercompression.differential.IntegratedIntegerCODEC" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.differential.IntegratedIntegerCODEC" -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.integercompression.differential.IntegratedVariableByte" -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.differential.IntegratedVariableByte" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.differential.IntegratedVariableByte" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.differential.IntegratedVariableByte" -> "java.nio.ByteBuffer (java.base)";
   "me.lemire.integercompression.differential.IntegratedVariableByte" -> "java.nio.ByteOrder (java.base)";
   "me.lemire.integercompression.differential.IntegratedVariableByte" -> "java.nio.IntBuffer (java.base)";
   "me.lemire.integercompression.differential.IntegratedVariableByte" -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.differential.IntegratedVariableByte" -> "me.lemire.integercompression.differential.IntegratedByteIntegerCODEC (classes)";
   "me.lemire.integercompression.differential.IntegratedVariableByte" -> "me.lemire.integercompression.differential.IntegratedIntegerCODEC (classes)";
   "me.lemire.integercompression.differential.IntegratedVariableByte" -> "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC (classes)";
   "me.lemire.integercompression.differential.SkippableIntegratedComposition" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.differential.SkippableIntegratedComposition" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.differential.SkippableIntegratedComposition" -> "java.lang.StringBuilder (java.base)";
   "me.lemire.integercompression.differential.SkippableIntegratedComposition" -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.differential.SkippableIntegratedComposition" -> "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC (classes)";
   "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC" -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.differential.XorBinaryPacking" -> "java.lang.Class (java.base)";
   "me.lemire.integercompression.differential.XorBinaryPacking" -> "java.lang.Integer (java.base)";
   "me.lemire.integercompression.differential.XorBinaryPacking" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.differential.XorBinaryPacking" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.differential.XorBinaryPacking" -> "me.lemire.integercompression.BitPacking (classes)";
   "me.lemire.integercompression.differential.XorBinaryPacking" -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.integercompression.differential.XorBinaryPacking" -> "me.lemire.integercompression.differential.IntegratedIntegerCODEC (classes)";
   "me.lemire.integercompression.synth.ClusteredDataGenerator" -> "java.io.PrintStream (java.base)";
   "me.lemire.integercompression.synth.ClusteredDataGenerator" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.synth.ClusteredDataGenerator" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.synth.ClusteredDataGenerator" -> "java.lang.System (java.base)";
   "me.lemire.integercompression.synth.ClusteredDataGenerator" -> "java.util.Random (java.base)";
   "me.lemire.integercompression.synth.ClusteredDataGenerator" -> "me.lemire.integercompression.synth.UniformDataGenerator (classes)";
   "me.lemire.integercompression.synth.UniformDataGenerator" -> "java.lang.Integer (java.base)";
   "me.lemire.integercompression.synth.UniformDataGenerator" -> "java.lang.Object (java.base)";
   "me.lemire.integercompression.synth.UniformDataGenerator" -> "java.lang.RuntimeException (java.base)";
   "me.lemire.integercompression.synth.UniformDataGenerator" -> "java.lang.String (java.base)";
   "me.lemire.integercompression.synth.UniformDataGenerator" -> "java.util.Arrays (java.base)";
   "me.lemire.integercompression.synth.UniformDataGenerator" -> "java.util.BitSet (java.base)";
   "me.lemire.integercompression.synth.UniformDataGenerator" -> "java.util.HashSet (java.base)";
   "me.lemire.integercompression.synth.UniformDataGenerator" -> "java.util.Iterator (java.base)";
   "me.lemire.integercompression.synth.UniformDataGenerator" -> "java.util.Random (java.base)";
   "me.lemire.longcompression.ByteLongCODEC"          -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.ByteLongCODEC"          -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.longcompression.IntegratedLongCODEC"    -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.IntegratedLongCODEC"    -> "me.lemire.longcompression.LongCODEC (classes)";
   "me.lemire.longcompression.LongAs2IntsCodec"       -> "java.lang.AssertionError (java.base)";
   "me.lemire.longcompression.LongAs2IntsCodec"       -> "java.lang.Class (java.base)";
   "me.lemire.longcompression.LongAs2IntsCodec"       -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.LongAs2IntsCodec"       -> "java.util.Arrays (java.base)";
   "me.lemire.longcompression.LongAs2IntsCodec"       -> "me.lemire.integercompression.BinaryPacking (classes)";
   "me.lemire.longcompression.LongAs2IntsCodec"       -> "me.lemire.integercompression.Composition (classes)";
   "me.lemire.longcompression.LongAs2IntsCodec"       -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.longcompression.LongAs2IntsCodec"       -> "me.lemire.integercompression.IntegerCODEC (classes)";
   "me.lemire.longcompression.LongAs2IntsCodec"       -> "me.lemire.integercompression.VariableByte (classes)";
   "me.lemire.longcompression.LongAs2IntsCodec"       -> "me.lemire.longcompression.LongCODEC (classes)";
   "me.lemire.longcompression.LongAs2IntsCodec"       -> "me.lemire.longcompression.RoaringIntPacking (classes)";
   "me.lemire.longcompression.LongCODEC"              -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.LongCODEC"              -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.longcompression.LongComposition"        -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.LongComposition"        -> "java.lang.String (java.base)";
   "me.lemire.longcompression.LongComposition"        -> "java.lang.StringBuilder (java.base)";
   "me.lemire.longcompression.LongComposition"        -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.longcompression.LongComposition"        -> "me.lemire.longcompression.LongCODEC (classes)";
   "me.lemire.longcompression.LongJustCopy"           -> "java.lang.Class (java.base)";
   "me.lemire.longcompression.LongJustCopy"           -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.LongJustCopy"           -> "java.lang.String (java.base)";
   "me.lemire.longcompression.LongJustCopy"           -> "java.lang.System (java.base)";
   "me.lemire.longcompression.LongJustCopy"           -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.longcompression.LongJustCopy"           -> "me.lemire.longcompression.LongCODEC (classes)";
   "me.lemire.longcompression.LongJustCopy"           -> "me.lemire.longcompression.SkippableLongCODEC (classes)";
   "me.lemire.longcompression.LongUtil"               -> "java.lang.Deprecated (java.base)";
   "me.lemire.longcompression.LongUtil"               -> "java.lang.Long (java.base)";
   "me.lemire.longcompression.LongUtil"               -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.LongUtil"               -> "java.lang.String (java.base)";
   "me.lemire.longcompression.LongVariableByte"       -> "java.lang.AssertionError (java.base)";
   "me.lemire.longcompression.LongVariableByte"       -> "java.lang.Class (java.base)";
   "me.lemire.longcompression.LongVariableByte"       -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.LongVariableByte"       -> "java.lang.String (java.base)";
   "me.lemire.longcompression.LongVariableByte"       -> "java.nio.ByteBuffer (java.base)";
   "me.lemire.longcompression.LongVariableByte"       -> "java.nio.ByteOrder (java.base)";
   "me.lemire.longcompression.LongVariableByte"       -> "java.nio.LongBuffer (java.base)";
   "me.lemire.longcompression.LongVariableByte"       -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.longcompression.LongVariableByte"       -> "me.lemire.longcompression.ByteLongCODEC (classes)";
   "me.lemire.longcompression.LongVariableByte"       -> "me.lemire.longcompression.LongCODEC (classes)";
   "me.lemire.longcompression.LongVariableByte"       -> "me.lemire.longcompression.SkippableLongCODEC (classes)";
   "me.lemire.longcompression.RoaringIntPacking"      -> "java.lang.Integer (java.base)";
   "me.lemire.longcompression.RoaringIntPacking"      -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.RoaringIntPacking"      -> "java.lang.String (java.base)";
   "me.lemire.longcompression.RoaringIntPacking"      -> "java.math.BigInteger (java.base)";
   "me.lemire.longcompression.RoaringIntPacking"      -> "java.util.Comparator (java.base)";
   "me.lemire.longcompression.RoaringIntPacking"      -> "me.lemire.longcompression.RoaringIntPacking$1 (classes)";
   "me.lemire.longcompression.RoaringIntPacking$1"    -> "java.lang.Integer (java.base)";
   "me.lemire.longcompression.RoaringIntPacking$1"    -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.RoaringIntPacking$1"    -> "java.util.Comparator (java.base)";
   "me.lemire.longcompression.RoaringIntPacking$1"    -> "me.lemire.longcompression.RoaringIntPacking (classes)";
   "me.lemire.longcompression.SkippableLongCODEC"     -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.SkippableLongCODEC"     -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.longcompression.SkippableLongComposition" -> "java.lang.Object (java.base)";
   "me.lemire.longcompression.SkippableLongComposition" -> "java.lang.String (java.base)";
   "me.lemire.longcompression.SkippableLongComposition" -> "java.lang.StringBuilder (java.base)";
   "me.lemire.longcompression.SkippableLongComposition" -> "me.lemire.integercompression.IntWrapper (classes)";
   "me.lemire.longcompression.SkippableLongComposition" -> "me.lemire.longcompression.SkippableLongCODEC (classes)";
   "me.lemire.longcompression.differential.LongDelta" -> "java.lang.Object (java.base)";
}
