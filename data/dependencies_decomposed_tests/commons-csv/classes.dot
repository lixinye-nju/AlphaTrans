digraph "classes" {
    // Path: java_projects/cleaned_final_projects_decomposed_tests/commons-csv/target/classes
   "org.apache.commons.csv.CSVFormat"                 -> "java.io.BufferedWriter (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.io.File (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.io.FileOutputStream (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.io.IOException (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.io.OutputStream (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.io.OutputStreamWriter (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.io.PrintStream (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.io.Reader (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.io.Serializable (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.io.StringWriter (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.io.Writer (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.Appendable (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.Boolean (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.CharSequence (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.Character (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.Class (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.Deprecated (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.IllegalArgumentException (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.IllegalStateException (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.Number (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.Object (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.SafeVarargs (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.String (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.StringBuilder (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.System (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.Throwable (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.invoke.CallSite (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.invoke.LambdaMetafactory (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.invoke.MethodHandle (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.invoke.MethodHandles (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.invoke.MethodHandles$Lookup (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.lang.invoke.MethodType (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.nio.charset.Charset (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.nio.file.Files (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.nio.file.OpenOption (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.nio.file.Path (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.util.Arrays (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.util.HashSet (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.util.Objects (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.util.Set (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "java.util.function.IntFunction (java.base)";
   "org.apache.commons.csv.CSVFormat"                 -> "org.apache.commons.csv.CSVFormat$1 (classes)";
   "org.apache.commons.csv.CSVFormat"                 -> "org.apache.commons.csv.CSVFormat$Builder (classes)";
   "org.apache.commons.csv.CSVFormat"                 -> "org.apache.commons.csv.CSVFormat$Predefined (classes)";
   "org.apache.commons.csv.CSVFormat"                 -> "org.apache.commons.csv.CSVParser (classes)";
   "org.apache.commons.csv.CSVFormat"                 -> "org.apache.commons.csv.CSVPrinter (classes)";
   "org.apache.commons.csv.CSVFormat"                 -> "org.apache.commons.csv.Constants (classes)";
   "org.apache.commons.csv.CSVFormat"                 -> "org.apache.commons.csv.DuplicateHeaderMode (classes)";
   "org.apache.commons.csv.CSVFormat"                 -> "org.apache.commons.csv.ExtendedBufferedReader (classes)";
   "org.apache.commons.csv.CSVFormat"                 -> "org.apache.commons.csv.IOUtils (classes)";
   "org.apache.commons.csv.CSVFormat"                 -> "org.apache.commons.csv.QuoteMode (classes)";
   "org.apache.commons.csv.CSVFormat$1"               -> "java.lang.NoSuchFieldError (java.base)";
   "org.apache.commons.csv.CSVFormat$1"               -> "java.lang.Object (java.base)";
   "org.apache.commons.csv.CSVFormat$1"               -> "org.apache.commons.csv.CSVFormat (classes)";
   "org.apache.commons.csv.CSVFormat$1"               -> "org.apache.commons.csv.QuoteMode (classes)";
   "org.apache.commons.csv.CSVFormat$Builder"         -> "java.lang.Character (java.base)";
   "org.apache.commons.csv.CSVFormat$Builder"         -> "java.lang.Deprecated (java.base)";
   "org.apache.commons.csv.CSVFormat$Builder"         -> "java.lang.IllegalArgumentException (java.base)";
   "org.apache.commons.csv.CSVFormat$Builder"         -> "java.lang.Object (java.base)";
   "org.apache.commons.csv.CSVFormat$Builder"         -> "java.lang.String (java.base)";
   "org.apache.commons.csv.CSVFormat$Builder"         -> "java.lang.StringBuilder (java.base)";
   "org.apache.commons.csv.CSVFormat$Builder"         -> "java.util.Objects (java.base)";
   "org.apache.commons.csv.CSVFormat$Builder"         -> "org.apache.commons.csv.CSVFormat (classes)";
   "org.apache.commons.csv.CSVFormat$Builder"         -> "org.apache.commons.csv.DuplicateHeaderMode (classes)";
   "org.apache.commons.csv.CSVFormat$Builder"         -> "org.apache.commons.csv.QuoteMode (classes)";
   "org.apache.commons.csv.CSVFormat$Predefined"      -> "java.lang.Class (java.base)";
   "org.apache.commons.csv.CSVFormat$Predefined"      -> "java.lang.Enum (java.base)";
   "org.apache.commons.csv.CSVFormat$Predefined"      -> "java.lang.Object (java.base)";
   "org.apache.commons.csv.CSVFormat$Predefined"      -> "java.lang.String (java.base)";
   "org.apache.commons.csv.CSVFormat$Predefined"      -> "org.apache.commons.csv.CSVFormat (classes)";
   "org.apache.commons.csv.CSVParser"                 -> "java.io.Closeable (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.io.File (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.io.IOException (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.io.InputStream (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.io.InputStreamReader (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.io.Reader (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.io.StringReader (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.lang.CharSequence (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.lang.IllegalArgumentException (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.lang.IllegalStateException (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.lang.Integer (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.lang.Iterable (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.lang.Object (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.lang.String (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.lang.StringBuilder (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.net.URL (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.nio.charset.Charset (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.nio.file.Files (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.nio.file.OpenOption (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.nio.file.Path (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.util.ArrayList (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.util.Arrays (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.util.Collections (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.util.Comparator (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.util.Iterator (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.util.LinkedHashMap (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.util.List (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.util.Map (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.util.Objects (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.util.Spliterator (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.util.Spliterators (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.util.TreeMap (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.util.stream.Collector (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.util.stream.Collectors (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.util.stream.Stream (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "java.util.stream.StreamSupport (java.base)";
   "org.apache.commons.csv.CSVParser"                 -> "org.apache.commons.csv.CSVFormat (classes)";
   "org.apache.commons.csv.CSVParser"                 -> "org.apache.commons.csv.CSVParser$1 (classes)";
   "org.apache.commons.csv.CSVParser"                 -> "org.apache.commons.csv.CSVParser$CSVRecordIterator (classes)";
   "org.apache.commons.csv.CSVParser"                 -> "org.apache.commons.csv.CSVParser$Headers (classes)";
   "org.apache.commons.csv.CSVParser"                 -> "org.apache.commons.csv.CSVRecord (classes)";
   "org.apache.commons.csv.CSVParser"                 -> "org.apache.commons.csv.Constants (classes)";
   "org.apache.commons.csv.CSVParser"                 -> "org.apache.commons.csv.DuplicateHeaderMode (classes)";
   "org.apache.commons.csv.CSVParser"                 -> "org.apache.commons.csv.ExtendedBufferedReader (classes)";
   "org.apache.commons.csv.CSVParser"                 -> "org.apache.commons.csv.Lexer (classes)";
   "org.apache.commons.csv.CSVParser"                 -> "org.apache.commons.csv.QuoteMode (classes)";
   "org.apache.commons.csv.CSVParser"                 -> "org.apache.commons.csv.Token (classes)";
   "org.apache.commons.csv.CSVParser"                 -> "org.apache.commons.csv.Token$Type (classes)";
   "org.apache.commons.csv.CSVParser$1"               -> "java.lang.NoSuchFieldError (java.base)";
   "org.apache.commons.csv.CSVParser$1"               -> "java.lang.Object (java.base)";
   "org.apache.commons.csv.CSVParser$1"               -> "org.apache.commons.csv.CSVParser (classes)";
   "org.apache.commons.csv.CSVParser$1"               -> "org.apache.commons.csv.Token (classes)";
   "org.apache.commons.csv.CSVParser$1"               -> "org.apache.commons.csv.Token$Type (classes)";
   "org.apache.commons.csv.CSVParser$CSVRecordIterator" -> "java.io.IOException (java.base)";
   "org.apache.commons.csv.CSVParser$CSVRecordIterator" -> "java.io.UncheckedIOException (java.base)";
   "org.apache.commons.csv.CSVParser$CSVRecordIterator" -> "java.lang.Class (java.base)";
   "org.apache.commons.csv.CSVParser$CSVRecordIterator" -> "java.lang.Object (java.base)";
   "org.apache.commons.csv.CSVParser$CSVRecordIterator" -> "java.lang.String (java.base)";
   "org.apache.commons.csv.CSVParser$CSVRecordIterator" -> "java.lang.StringBuilder (java.base)";
   "org.apache.commons.csv.CSVParser$CSVRecordIterator" -> "java.lang.UnsupportedOperationException (java.base)";
   "org.apache.commons.csv.CSVParser$CSVRecordIterator" -> "java.util.Iterator (java.base)";
   "org.apache.commons.csv.CSVParser$CSVRecordIterator" -> "java.util.NoSuchElementException (java.base)";
   "org.apache.commons.csv.CSVParser$CSVRecordIterator" -> "org.apache.commons.csv.CSVParser (classes)";
   "org.apache.commons.csv.CSVParser$CSVRecordIterator" -> "org.apache.commons.csv.CSVRecord (classes)";
   "org.apache.commons.csv.CSVParser$Headers"         -> "java.lang.Integer (java.base)";
   "org.apache.commons.csv.CSVParser$Headers"         -> "java.lang.Object (java.base)";
   "org.apache.commons.csv.CSVParser$Headers"         -> "java.lang.String (java.base)";
   "org.apache.commons.csv.CSVParser$Headers"         -> "java.util.List (java.base)";
   "org.apache.commons.csv.CSVParser$Headers"         -> "java.util.Map (java.base)";
   "org.apache.commons.csv.CSVParser$Headers"         -> "org.apache.commons.csv.CSVParser (classes)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.io.Closeable (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.io.Flushable (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.io.IOException (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.lang.Appendable (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.lang.Character (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.lang.Iterable (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.lang.Object (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.lang.RuntimeException (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.lang.String (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.lang.Throwable (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.lang.invoke.CallSite (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.lang.invoke.LambdaMetafactory (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.lang.invoke.MethodHandle (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.lang.invoke.MethodHandles (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.lang.invoke.MethodHandles$Lookup (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.lang.invoke.MethodType (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.util.Arrays (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.util.Iterator (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.util.List (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.util.Objects (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.util.function.Consumer (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "java.util.stream.Stream (java.base)";
   "org.apache.commons.csv.CSVPrinter"                -> "org.apache.commons.csv.CSVFormat (classes)";
   "org.apache.commons.csv.CSVPrinter"                -> "org.apache.commons.csv.Constants (classes)";
   "org.apache.commons.csv.CSVPrinter"                -> "org.apache.commons.csv.IOUtils (classes)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.io.Serializable (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.lang.ArrayIndexOutOfBoundsException (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.lang.Enum (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.lang.IllegalArgumentException (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.lang.IllegalStateException (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.lang.Integer (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.lang.Iterable (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.lang.Object (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.lang.String (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.lang.StringBuilder (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.lang.invoke.CallSite (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.lang.invoke.LambdaMetafactory (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.lang.invoke.MethodHandle (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.lang.invoke.MethodHandles (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.lang.invoke.MethodHandles$Lookup (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.lang.invoke.MethodType (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.util.Arrays (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.util.Iterator (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.util.LinkedHashMap (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.util.List (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.util.Map (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.util.Set (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.util.function.BiConsumer (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.util.stream.Collector (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.util.stream.Collectors (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "java.util.stream.Stream (java.base)";
   "org.apache.commons.csv.CSVRecord"                 -> "org.apache.commons.csv.CSVParser (classes)";
   "org.apache.commons.csv.CSVRecord"                 -> "org.apache.commons.csv.Constants (classes)";
   "org.apache.commons.csv.Constants"                 -> "java.lang.Character (java.base)";
   "org.apache.commons.csv.Constants"                 -> "java.lang.Object (java.base)";
   "org.apache.commons.csv.Constants"                 -> "java.lang.String (java.base)";
   "org.apache.commons.csv.DuplicateHeaderMode"       -> "java.lang.Class (java.base)";
   "org.apache.commons.csv.DuplicateHeaderMode"       -> "java.lang.Enum (java.base)";
   "org.apache.commons.csv.DuplicateHeaderMode"       -> "java.lang.Object (java.base)";
   "org.apache.commons.csv.DuplicateHeaderMode"       -> "java.lang.String (java.base)";
   "org.apache.commons.csv.ExtendedBufferedReader"    -> "java.io.BufferedReader (java.base)";
   "org.apache.commons.csv.ExtendedBufferedReader"    -> "java.io.IOException (java.base)";
   "org.apache.commons.csv.ExtendedBufferedReader"    -> "java.io.Reader (java.base)";
   "org.apache.commons.csv.ExtendedBufferedReader"    -> "java.lang.String (java.base)";
   "org.apache.commons.csv.ExtendedBufferedReader"    -> "java.lang.StringBuilder (java.base)";
   "org.apache.commons.csv.ExtendedBufferedReader"    -> "org.apache.commons.csv.Constants (classes)";
   "org.apache.commons.csv.IOUtils"                   -> "java.io.IOException (java.base)";
   "org.apache.commons.csv.IOUtils"                   -> "java.io.Reader (java.base)";
   "org.apache.commons.csv.IOUtils"                   -> "java.io.Writer (java.base)";
   "org.apache.commons.csv.IOUtils"                   -> "java.lang.Appendable (java.base)";
   "org.apache.commons.csv.IOUtils"                   -> "java.lang.CharSequence (java.base)";
   "org.apache.commons.csv.IOUtils"                   -> "java.lang.Object (java.base)";
   "org.apache.commons.csv.IOUtils"                   -> "java.lang.RuntimeException (java.base)";
   "org.apache.commons.csv.IOUtils"                   -> "java.lang.Throwable (java.base)";
   "org.apache.commons.csv.IOUtils"                   -> "java.nio.Buffer (java.base)";
   "org.apache.commons.csv.IOUtils"                   -> "java.nio.CharBuffer (java.base)";
   "org.apache.commons.csv.Lexer"                     -> "java.io.Closeable (java.base)";
   "org.apache.commons.csv.Lexer"                     -> "java.io.IOException (java.base)";
   "org.apache.commons.csv.Lexer"                     -> "java.lang.Character (java.base)";
   "org.apache.commons.csv.Lexer"                     -> "java.lang.Object (java.base)";
   "org.apache.commons.csv.Lexer"                     -> "java.lang.String (java.base)";
   "org.apache.commons.csv.Lexer"                     -> "java.lang.StringBuilder (java.base)";
   "org.apache.commons.csv.Lexer"                     -> "org.apache.commons.csv.CSVFormat (classes)";
   "org.apache.commons.csv.Lexer"                     -> "org.apache.commons.csv.Constants (classes)";
   "org.apache.commons.csv.Lexer"                     -> "org.apache.commons.csv.ExtendedBufferedReader (classes)";
   "org.apache.commons.csv.Lexer"                     -> "org.apache.commons.csv.Token (classes)";
   "org.apache.commons.csv.Lexer"                     -> "org.apache.commons.csv.Token$Type (classes)";
   "org.apache.commons.csv.QuoteMode"                 -> "java.lang.Class (java.base)";
   "org.apache.commons.csv.QuoteMode"                 -> "java.lang.Enum (java.base)";
   "org.apache.commons.csv.QuoteMode"                 -> "java.lang.Object (java.base)";
   "org.apache.commons.csv.QuoteMode"                 -> "java.lang.String (java.base)";
   "org.apache.commons.csv.Token"                     -> "java.lang.Object (java.base)";
   "org.apache.commons.csv.Token"                     -> "java.lang.String (java.base)";
   "org.apache.commons.csv.Token"                     -> "java.lang.StringBuilder (java.base)";
   "org.apache.commons.csv.Token"                     -> "org.apache.commons.csv.Token$Type (classes)";
   "org.apache.commons.csv.Token$Type"                -> "java.lang.Class (java.base)";
   "org.apache.commons.csv.Token$Type"                -> "java.lang.Enum (java.base)";
   "org.apache.commons.csv.Token$Type"                -> "java.lang.Object (java.base)";
   "org.apache.commons.csv.Token$Type"                -> "java.lang.String (java.base)";
   "org.apache.commons.csv.Token$Type"                -> "org.apache.commons.csv.Token (classes)";
   "org.apache.commons.csv.package-info"              -> "java.lang.Object (java.base)";
}
