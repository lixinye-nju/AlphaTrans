{
    "ResourcedTest": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/integercompression/ResourcedTest.java",
        "98-128:IntCompressorTest_test3_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                "class": "IntCompressor",
                "method": "26-36:IntCompressor"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                "class": "IntCompressor",
                "method": "49-63:compress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                "class": "IntCompressor",
                "method": "71-79:uncompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "29-39:IntegratedIntCompressor"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "52-65:compress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "73-81:uncompress"
            }
        ],
        "74-95:IntCompressorTest_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                "class": "IntCompressor",
                "method": "26-36:IntCompressor"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                "class": "IntCompressor",
                "method": "49-63:compress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                "class": "IntCompressor",
                "method": "71-79:uncompress"
            }
        ],
        "58-71:IntCompressorTest_test1_decomposed": [],
        "46-55:IntCompressorTest_test0_decomposed": []
    },
    "BoundaryTest": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/integercompression/BoundaryTest.java",
        "108-111:testComposition_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BoundaryTest",
                "class": "BoundaryTest",
                "method": "75-79:testBoundary"
            }
        ],
        "103-105:testComposition_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            }
        ],
        "96-100:testIntegratedComposition_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BoundaryTest",
                "class": "BoundaryTest",
                "method": "75-79:testBoundary"
            }
        ],
        "90-93:testIntegratedComposition_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            }
        ],
        "75-79:testBoundary": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BoundaryTest",
                "class": "BoundaryTest",
                "method": "56-60:around32"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BoundaryTest",
                "class": "BoundaryTest",
                "method": "63-67:around128"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BoundaryTest",
                "class": "BoundaryTest",
                "method": "69-73:around256"
            }
        ],
        "69-73:around256": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BoundaryTest",
                "class": "BoundaryTest",
                "method": "26-55:compressAndUncompress"
            }
        ],
        "63-67:around128": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BoundaryTest",
                "class": "BoundaryTest",
                "method": "26-55:compressAndUncompress"
            }
        ],
        "56-60:around32": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BoundaryTest",
                "class": "BoundaryTest",
                "method": "26-55:compressAndUncompress"
            }
        ],
        "26-55:compressAndUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            }
        ]
    },
    "LongAs2IntsCodec": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/longcompression/LongAs2IntsCodec.java",
        "120-194:uncompress1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.RoaringIntPacking",
                "class": "RoaringIntPacking",
                "method": "25-27:high"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.RoaringIntPacking",
                "class": "RoaringIntPacking",
                "method": "34-36:low"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.RoaringIntPacking",
                "class": "RoaringIntPacking",
                "method": "45-48:pack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "43-114:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.RoaringIntPacking",
                "class": "RoaringIntPacking",
                "method": "25-27:high"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.RoaringIntPacking",
                "class": "RoaringIntPacking",
                "method": "34-36:low"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.RoaringIntPacking",
                "class": "RoaringIntPacking",
                "method": "45-48:pack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "35-37:LongAs2IntsCodec1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongAs2IntsCodec",
                "class": "LongAs2IntsCodec",
                "method": "31-34:LongAs2IntsCodec"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            }
        ],
        "31-34:LongAs2IntsCodec": []
    },
    "IntegratedComposition": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/differential/IntegratedComposition.java",
        "69-71:toString": [],
        "58-66:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            }
        ],
        "41-55:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            }
        ],
        "33-37:IntegratedComposition": []
    },
    "DeltaZigzagEncoding": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/DeltaZigzagEncoding.java"
    },
    "Context": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/DeltaZigzagEncoding.java",
        "25-27:getContextValue": [],
        "21-23:setContextValue": [],
        "17-19:Context": []
    },
    "Decoder": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/DeltaZigzagEncoding.java",
        "90-92:decodeArray2": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Decoder",
                "method": "85-88:decodeArray1"
            }
        ],
        "85-88:decodeArray1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Decoder",
                "method": "77-83:decodeArray0"
            }
        ],
        "77-83:decodeArray0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Decoder",
                "method": "70-75:decodeInt"
            }
        ],
        "70-75:decodeInt": [],
        "66-68:Decoder": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Context",
                "method": "17-19:Context"
            }
        ]
    },
    "Encoder": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/DeltaZigzagEncoding.java",
        "59-62:encodeArray3": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Encoder",
                "method": "41-47:encodeArray0"
            }
        ],
        "54-57:encodeArray2": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Encoder",
                "method": "41-47:encodeArray0"
            }
        ],
        "49-52:encodeArray1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Encoder",
                "method": "41-47:encodeArray0"
            }
        ],
        "41-47:encodeArray0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Encoder",
                "method": "35-39:encodeInt"
            }
        ],
        "35-39:encodeInt": [],
        "31-33:Encoder": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Context",
                "method": "17-19:Context"
            }
        ]
    },
    "Timer": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/benchmarktools/PerformanceLogger.java",
        "29-31:getDuration": [],
        "24-27:end": [],
        "20-22:start": [],
        "17-18:Timer": []
    },
    "PerformanceLogger": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/benchmarktools/PerformanceLogger.java",
        "62-64:getMiS": [],
        "71-74:getDecompressSpeed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                "class": "PerformanceLogger",
                "method": "62-64:getMiS"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                "class": "Timer",
                "method": "29-31:getDuration"
            }
        ],
        "66-69:getCompressSpeed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                "class": "PerformanceLogger",
                "method": "62-64:getMiS"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                "class": "Timer",
                "method": "29-31:getDuration"
            }
        ],
        "58-60:getBitPerInt": [],
        "54-56:getCompressedSize": [],
        "50-52:getOriginalSize": [],
        "46-48:addCompressedSize": [],
        "42-44:addOriginalSize": []
    },
    "BinaryPacking": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/BinaryPacking.java",
        "136-138:toString": [],
        "102-133:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3021-3127:fastunpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "92-99:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                "class": "BinaryPacking",
                "method": "102-133:headlessUncompress"
            }
        ],
        "54-89:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "36-41:maxbits"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1706-1812:fastpackwithoutmask"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "43-51:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BinaryPacking",
                "class": "BinaryPacking",
                "method": "54-89:headlessCompress"
            }
        ]
    },
    "Simple9": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/Simple9.java",
        "295-297:toString": [],
        "281-288:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Simple9",
                "class": "Simple9",
                "method": "83-269:headlessUncompress"
            }
        ],
        "272-278:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Simple9",
                "class": "Simple9",
                "method": "24-80:headlessCompress"
            }
        ],
        "83-269:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "24-80:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ]
    },
    "IntegratedIntCompressor": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/differential/IntegratedIntCompressor.java",
        "73-81:uncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC",
                "class": "SkippableIntegratedIntegerCODEC",
                "method": "71-73:headlessUncompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            }
        ],
        "52-65:compress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC",
                "class": "SkippableIntegratedIntegerCODEC",
                "method": "48-50:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.UncompressibleInputException",
                "class": "UncompressibleInputException",
                "method": "13-15:UncompressibleInputException"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            }
        ],
        "29-39:IntegratedIntCompressor": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                "class": "SkippableIntegratedComposition",
                "method": "33-37:SkippableIntegratedComposition"
            }
        ]
    },
    "DeltaZigzagEncodingTest": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/integercompression/DeltaZigzagEncodingTest.java",
        "150-157:checkSpots_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.DeltaZigzagEncodingTest",
                "class": "SpotChecker",
                "method": "73-78:check"
            }
        ],
        "145-147:checkSpots_test0_decomposed": [],
        "137-142:checkDecodeSimple_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Decoder",
                "method": "66-68:Decoder"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.DeltaZigzagEncodingTest",
                "class": "DeltaZigzagEncodingTest",
                "method": "39-47:checkDecode"
            }
        ],
        "132-134:checkDecodeSimple_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Decoder",
                "method": "66-68:Decoder"
            }
        ],
        "124-129:checkEncodeSimple_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Encoder",
                "method": "31-33:Encoder"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.DeltaZigzagEncodingTest",
                "class": "DeltaZigzagEncodingTest",
                "method": "30-37:checkEncode"
            }
        ],
        "119-121:checkEncodeSimple_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Encoder",
                "method": "31-33:Encoder"
            }
        ],
        "108-116:checkZigzagDecoder_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Decoder",
                "method": "66-68:Decoder"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.DeltaZigzagEncodingTest",
                "class": "DeltaZigzagEncodingTest",
                "method": "25-28:zigzagDecode"
            }
        ],
        "103-105:checkZigzagDecoder_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Decoder",
                "method": "66-68:Decoder"
            }
        ],
        "91-100:checkZigzagEncode_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Encoder",
                "method": "31-33:Encoder"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.DeltaZigzagEncodingTest",
                "class": "DeltaZigzagEncodingTest",
                "method": "20-23:zigzagEncode"
            }
        ],
        "86-88:checkZigzagEncode_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Encoder",
                "method": "31-33:Encoder"
            }
        ],
        "39-47:checkDecode": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Decoder",
                "method": "90-92:decodeArray2"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Context",
                "method": "25-27:getContextValue"
            }
        ],
        "30-37:checkEncode": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Encoder",
                "method": "59-62:encodeArray3"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Context",
                "method": "25-27:getContextValue"
            }
        ],
        "25-28:zigzagDecode": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Context",
                "method": "21-23:setContextValue"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Decoder",
                "method": "70-75:decodeInt"
            }
        ],
        "20-23:zigzagEncode": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Context",
                "method": "21-23:setContextValue"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Encoder",
                "method": "35-39:encodeInt"
            }
        ]
    },
    "SpotChecker": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/integercompression/DeltaZigzagEncodingTest.java",
        "73-78:check": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Decoder",
                "method": "70-75:decodeInt"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Encoder",
                "method": "35-39:encodeInt"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Context",
                "method": "21-23:setContextValue"
            }
        ]
    },
    "ClusteredDataGenerator": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/synth/ClusteredDataGenerator.java",
        "81-86:main": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.synth.ClusteredDataGenerator",
                "class": "ClusteredDataGenerator",
                "method": "69-73:generateClustered"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.synth.ClusteredDataGenerator",
                "class": "ClusteredDataGenerator",
                "method": "25-26:ClusteredDataGenerator"
            }
        ],
        "69-73:generateClustered": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.synth.ClusteredDataGenerator",
                "class": "ClusteredDataGenerator",
                "method": "34-58:fillClustered"
            }
        ],
        "25-26:ClusteredDataGenerator": [],
        "34-58:fillClustered": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.synth.ClusteredDataGenerator",
                "class": "ClusteredDataGenerator",
                "method": "28-32:fillUniform"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.synth.ClusteredDataGenerator",
                "class": "ClusteredDataGenerator",
                "method": "34-58:fillClustered"
            }
        ],
        "28-32:fillUniform": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.synth.UniformDataGenerator",
                "class": "UniformDataGenerator",
                "method": "90-97:generateUniform"
            }
        ]
    },
    "AdhocTest": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/integercompression/AdhocTest.java",
        "171-176:biggerCompressedArray2_test3_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "58-85:assertSymmetry"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            }
        ],
        "164-168:biggerCompressedArray2_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "58-85:assertSymmetry"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            }
        ],
        "158-161:biggerCompressedArray2_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "58-85:assertSymmetry"
            }
        ],
        "153-155:biggerCompressedArray2_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            }
        ],
        "147-150:biggerCompressedArray1_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "58-85:assertSymmetry"
            }
        ],
        "142-144:biggerCompressedArray1_test0_decomposed": [],
        "134-139:biggerCompressedArray0_test3_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "58-85:assertSymmetry"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            }
        ],
        "127-131:biggerCompressedArray0_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "58-85:assertSymmetry"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            }
        ],
        "121-124:biggerCompressedArray0_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "58-85:assertSymmetry"
            }
        ],
        "116-118:biggerCompressedArray0_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            }
        ],
        "94-113:testIssue41_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                "class": "SkippableIntegratedComposition",
                "method": "33-37:SkippableIntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC",
                "class": "SkippableIntegratedIntegerCODEC",
                "method": "48-50:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC",
                "class": "SkippableIntegratedIntegerCODEC",
                "method": "71-73:headlessUncompress"
            }
        ],
        "76-91:testIssue29b_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                "class": "SkippableComposition",
                "method": "31-35:SkippableComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "44-46:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "66-68:headlessUncompress"
            }
        ],
        "57-73:testIssue29_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            }
        ]
    },
    "S9": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/S9.java",
        "124-197:uncompress": [],
        "76-106:compress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "20-22:smallerorequalthan"
            }
        ],
        "31-58:estimatecompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "20-22:smallerorequalthan"
            }
        ]
    },
    "LongVariableByte": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/longcompression/LongVariableByte.java",
        "300-327:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "295-297:toString": [],
        "236-292:uncompress1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "206-233:uncompress1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "127-203:compress1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongVariableByte",
                "class": "LongVariableByte",
                "method": "26-28:extract7bits"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongVariableByte",
                "class": "LongVariableByte",
                "method": "30-32:extract7bitsmaskless"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "40-124:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongVariableByte",
                "class": "LongVariableByte",
                "method": "336-338:makeBuffer"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongVariableByte",
                "class": "LongVariableByte",
                "method": "26-28:extract7bits"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongVariableByte",
                "class": "LongVariableByte",
                "method": "30-32:extract7bitsmaskless"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "34-37:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongVariableByte",
                "class": "LongVariableByte",
                "method": "40-124:headlessCompress"
            }
        ],
        "336-338:makeBuffer": [],
        "30-32:extract7bitsmaskless": [],
        "26-28:extract7bits": []
    },
    "BasicTest": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/integercompression/BasicTest.java",
        "2724-2738:fastPfor128Test_test3_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "87-93:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "95-101:uncompress0"
            }
        ],
        "2711-2721:fastPfor128Test_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "87-93:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "95-101:uncompress0"
            }
        ],
        "2699-2708:fastPfor128Test_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "87-93:compress1"
            }
        ],
        "2693-2696:fastPfor128Test_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            }
        ],
        "2676-2690:fastPforTest_test3_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "87-93:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "95-101:uncompress0"
            }
        ],
        "2663-2673:fastPforTest_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "87-93:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "95-101:uncompress0"
            }
        ],
        "2651-2660:fastPforTest_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "87-93:compress1"
            }
        ],
        "2645-2648:fastPforTest_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            }
        ],
        "2590-2642:testUnsortedExample_test44_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "321-336:testUnsorted3"
            }
        ],
        "2537-2587:testUnsortedExample_test43_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "321-336:testUnsorted3"
            }
        ],
        "2486-2534:testUnsortedExample_test42_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "321-336:testUnsorted3"
            }
        ],
        "2436-2483:testUnsortedExample_test41_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "321-336:testUnsorted3"
            }
        ],
        "2387-2433:testUnsortedExample_test40_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "321-336:testUnsorted3"
            }
        ],
        "2339-2384:testUnsortedExample_test39_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "321-336:testUnsorted3"
            }
        ],
        "2292-2336:testUnsortedExample_test38_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "321-336:testUnsorted3"
            }
        ],
        "2246-2289:testUnsortedExample_test37_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "321-336:testUnsorted3"
            }
        ],
        "2201-2243:testUnsortedExample_test36_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "321-336:testUnsorted3"
            }
        ],
        "2157-2198:testUnsortedExample_test35_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "321-336:testUnsorted3"
            }
        ],
        "2114-2154:testUnsortedExample_test34_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "321-336:testUnsorted3"
            }
        ],
        "2072-2111:testUnsortedExample_test33_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "321-336:testUnsorted3"
            }
        ],
        "2031-2069:testUnsortedExample_test32_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "321-336:testUnsorted3"
            }
        ],
        "1991-2028:testUnsortedExample_test31_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "321-336:testUnsorted3"
            }
        ],
        "1952-1988:testUnsortedExample_test30_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "321-336:testUnsorted3"
            }
        ],
        "1914-1949:testUnsortedExample_test29_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "321-336:testUnsorted3"
            }
        ],
        "1878-1911:testUnsortedExample_test28_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "321-336:testUnsorted3"
            }
        ],
        "1844-1875:testUnsortedExample_test27_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            }
        ],
        "1811-1841:testUnsortedExample_test26_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            }
        ],
        "1779-1808:testUnsortedExample_test25_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            }
        ],
        "1748-1776:testUnsortedExample_test24_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            }
        ],
        "1718-1745:testUnsortedExample_test23_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            }
        ],
        "1689-1715:testUnsortedExample_test22_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            }
        ],
        "1661-1686:testUnsortedExample_test21_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            }
        ],
        "1634-1658:testUnsortedExample_test20_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            }
        ],
        "1608-1631:testUnsortedExample_test19_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            }
        ],
        "1583-1605:testUnsortedExample_test18_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            }
        ],
        "1559-1580:testUnsortedExample_test17_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            }
        ],
        "1536-1556:testUnsortedExample_test16_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            }
        ],
        "1514-1533:testUnsortedExample_test15_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "304-319:testUnsorted2"
            }
        ],
        "1493-1511:testUnsortedExample_test14_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            }
        ],
        "1474-1490:testUnsortedExample_test13_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            }
        ],
        "1457-1471:testUnsortedExample_test12_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            }
        ],
        "1441-1454:testUnsortedExample_test11_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            }
        ],
        "1426-1438:testUnsortedExample_test10_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            }
        ],
        "1412-1423:testUnsortedExample_test9_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            }
        ],
        "1399-1409:testUnsortedExample_test8_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            }
        ],
        "1387-1396:testUnsortedExample_test7_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            }
        ],
        "1376-1384:testUnsortedExample_test6_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            }
        ],
        "1366-1373:testUnsortedExample_test5_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            }
        ],
        "1357-1363:testUnsortedExample_test4_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            }
        ],
        "1349-1354:testUnsortedExample_test3_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            }
        ],
        "1342-1346:testUnsortedExample_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            }
        ],
        "1336-1339:testUnsortedExample_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            }
        ],
        "1331-1333:testUnsortedExample_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            }
        ],
        "1297-1328:zeroinzerouttest_test26_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            }
        ],
        "1265-1294:zeroinzerouttest_test25_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            }
        ],
        "1234-1262:zeroinzerouttest_test24_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            }
        ],
        "1204-1231:zeroinzerouttest_test23_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            }
        ],
        "1175-1201:zeroinzerouttest_test22_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            }
        ],
        "1147-1172:zeroinzerouttest_test21_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            }
        ],
        "1120-1144:zeroinzerouttest_test20_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            }
        ],
        "1094-1117:zeroinzerouttest_test19_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            }
        ],
        "1069-1091:zeroinzerouttest_test18_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            }
        ],
        "1045-1066:zeroinzerouttest_test17_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            }
        ],
        "1022-1042:zeroinzerouttest_test16_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            }
        ],
        "1000-1019:zeroinzerouttest_test15_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            }
        ],
        "980-997:zeroinzerouttest_test14_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            }
        ],
        "962-977:zeroinzerouttest_test13_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            }
        ],
        "945-959:zeroinzerouttest_test12_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            }
        ],
        "929-942:zeroinzerouttest_test11_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            }
        ],
        "914-926:zeroinzerouttest_test10_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            }
        ],
        "900-911:zeroinzerouttest_test9_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            }
        ],
        "887-897:zeroinzerouttest_test8_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            }
        ],
        "875-884:zeroinzerouttest_test7_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            }
        ],
        "864-872:zeroinzerouttest_test6_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            }
        ],
        "854-861:zeroinzerouttest_test5_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            }
        ],
        "845-851:zeroinzerouttest_test4_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            }
        ],
        "837-842:zeroinzerouttest_test3_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            }
        ],
        "830-834:zeroinzerouttest_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            }
        ],
        "824-827:zeroinzerouttest_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            }
        ],
        "819-821:zeroinzerouttest_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            }
        ],
        "803-816:spuriousouttest_test11_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            }
        ],
        "788-800:spuriousouttest_test10_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            }
        ],
        "774-785:spuriousouttest_test9_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            }
        ],
        "761-771:spuriousouttest_test8_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            }
        ],
        "749-758:spuriousouttest_test7_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            }
        ],
        "738-746:spuriousouttest_test6_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            }
        ],
        "728-735:spuriousouttest_test5_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            }
        ],
        "719-725:spuriousouttest_test4_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            }
        ],
        "711-716:spuriousouttest_test3_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            }
        ],
        "704-708:spuriousouttest_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            }
        ],
        "698-701:spuriousouttest_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            }
        ],
        "693-695:spuriousouttest_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            }
        ],
        "686-690:basictest_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "176-223:test1"
            }
        ],
        "663-683:verifyWithExceptions_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "42-148:fastpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3021-3127:fastunpack"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "113-117:maskArray"
            }
        ],
        "643-660:verifyWithoutMask_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1706-1812:fastpackwithoutmask"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3021-3127:fastunpack"
            }
        ],
        "623-640:verifyBitPacking_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "42-148:fastpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3021-3127:fastunpack"
            }
        ],
        "612-620:checkXorBinaryPacking3_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "164-174:test0"
            }
        ],
        "604-609:checkXorBinaryPacking3_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            }
        ],
        "598-601:checkXorBinaryPacking3_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            }
        ],
        "591-595:checkXorBinaryPacking2_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            }
        ],
        "585-588:checkXorBinaryPacking2_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            }
        ],
        "578-582:checkXorBinaryPacking1_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            }
        ],
        "572-575:checkXorBinaryPacking1_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            }
        ],
        "566-569:checkXorBinaryPacking_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            }
        ],
        "561-563:checkXorBinaryPacking_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            }
        ],
        "545-558:checkDeltaZigzagPacking_test7_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "164-174:test0"
            }
        ],
        "532-542:checkDeltaZigzagPacking_test6_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "274-302:testUnsorted"
            }
        ],
        "520-529:checkDeltaZigzagPacking_test5_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            }
        ],
        "509-517:checkDeltaZigzagPacking_test4_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            }
        ],
        "500-506:checkDeltaZigzagPacking_test3_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            }
        ],
        "493-497:checkDeltaZigzagPacking_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "139-148:testSpurious"
            }
        ],
        "487-490:checkDeltaZigzagPacking_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            }
        ],
        "482-484:checkDeltaZigzagPacking_test0_decomposed": [],
        "472-479:checkDeltaZigzagVB_test3_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "164-174:test0"
            }
        ],
        "465-469:checkDeltaZigzagVB_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "150-162:testZeroInZeroOut"
            }
        ],
        "459-462:checkDeltaZigzagVB_test1_decomposed": [],
        "454-456:checkDeltaZigzagVB_test0_decomposed": [],
        "404-451:varyingLengthTest2_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "87-93:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "95-101:uncompress0"
            }
        ],
        "373-401:varyingLengthTest_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "87-93:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "95-101:uncompress0"
            }
        ],
        "348-370:saulTest_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            }
        ],
        "274-302:testUnsorted": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            }
        ],
        "113-117:maskArray": [],
        "321-336:testUnsorted3": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            }
        ],
        "304-319:testUnsorted2": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            }
        ],
        "225-263:testCodec": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                "class": "Delta",
                "method": "24-28:delta0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                "class": "Delta",
                "method": "97-113:fastinverseDelta0"
            }
        ],
        "176-223:test1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.synth.ClusteredDataGenerator",
                "class": "ClusteredDataGenerator",
                "method": "25-26:ClusteredDataGenerator"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.synth.ClusteredDataGenerator",
                "class": "ClusteredDataGenerator",
                "method": "69-73:generateClustered"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "225-263:testCodec"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            }
        ],
        "164-174:test0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.synth.ClusteredDataGenerator",
                "class": "ClusteredDataGenerator",
                "method": "25-26:ClusteredDataGenerator"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.synth.ClusteredDataGenerator",
                "class": "ClusteredDataGenerator",
                "method": "69-73:generateClustered"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.BasicTest",
                "class": "BasicTest",
                "method": "225-263:testCodec"
            }
        ],
        "150-162:testZeroInZeroOut": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            }
        ],
        "139-148:testSpurious": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            }
        ]
    },
    "Simple16": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/Simple16.java",
        "166-168:toString": [],
        "156-163:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Simple16",
                "class": "Simple16",
                "method": "93-104:headlessUncompress"
            }
        ],
        "147-153:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Simple16",
                "class": "Simple16",
                "method": "16-29:headlessCompress"
            }
        ],
        "93-104:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Simple16",
                "class": "Simple16",
                "method": "81-90:decompressblock"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "125-134:uncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Simple16",
                "class": "Simple16",
                "method": "81-90:decompressblock"
            }
        ],
        "81-90:decompressblock": [],
        "46-64:compressblock": [],
        "16-29:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Simple16",
                "class": "Simple16",
                "method": "46-64:compressblock"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "136-144:shiftme": [],
        "128-139:s16Decompress": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.Simple16",
                "class": "Simple16",
                "method": "154-158:readBitsForS16"
            }
        ],
        "84-111:s16Compress": [],
        "154-158:readBitsForS16": []
    },
    "Kamikaze": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/Kamikaze.java",
        "58-66:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Kamikaze",
                "class": "Kamikaze",
                "method": "31-39:headlessUncompress"
            }
        ],
        "47-55:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Kamikaze",
                "class": "Kamikaze",
                "method": "19-28:headlessCompress"
            }
        ],
        "42-44:toString": [],
        "31-39:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDelta",
                "class": "PForDelta",
                "method": "115-152:decompressOneBlock"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "19-28:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDelta",
                "class": "PForDelta",
                "method": "70-102:compressOneBlockOpt"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            }
        ]
    },
    "IntCompressorTest": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/integercompression/IntCompressorTest.java",
        "102-113:basicIntegratedTest_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "52-65:compress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "73-81:uncompress"
            }
        ],
        "89-99:superSimpleExample_test3_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "29-39:IntegratedIntCompressor"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "52-65:compress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "73-81:uncompress"
            }
        ],
        "78-86:superSimpleExample_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "29-39:IntegratedIntCompressor"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "52-65:compress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "73-81:uncompress"
            }
        ],
        "68-75:superSimpleExample_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "29-39:IntegratedIntCompressor"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "52-65:compress"
            }
        ],
        "63-65:superSimpleExample_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "29-39:IntegratedIntCompressor"
            }
        ],
        "49-60:basicTest_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                "class": "IntCompressor",
                "method": "49-63:compress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntCompressor",
                "class": "IntCompressor",
                "method": "71-79:uncompress"
            }
        ]
    },
    "SkippableIntegratedIntegerCODEC": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/differential/SkippableIntegratedIntegerCODEC.java",
        "71-73:headlessUncompress": [],
        "48-50:headlessCompress": []
    },
    "IntegerCODEC": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/IntegerCODEC.java",
        "57-59:uncompress0": [],
        "36-38:compress0": []
    },
    "DeltaZigzagBinaryPacking": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/DeltaZigzagBinaryPacking.java",
        "102-104:toString": [],
        "60-86:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Decoder",
                "method": "66-68:Decoder"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                "class": "DeltaZigzagBinaryPacking",
                "method": "95-99:unpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Decoder",
                "method": "77-83:decodeArray0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "25-57:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Encoder",
                "method": "31-33:Encoder"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "43-77:maxbits32"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Encoder",
                "method": "49-52:encodeArray1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagBinaryPacking",
                "class": "DeltaZigzagBinaryPacking",
                "method": "88-93:pack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "95-99:unpack": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3021-3127:fastunpack"
            }
        ],
        "88-93:pack": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1706-1812:fastpackwithoutmask"
            }
        ]
    },
    "RoaringIntPacking": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/longcompression/RoaringIntPacking.java",
        "100-107:toUnsignedString": [],
        "88-91:compareUnsigned": [],
        "69-77:unsignedComparator": [],
        "58-64:highestHigh": [],
        "45-48:pack": [],
        "34-36:low": [],
        "25-27:high": []
    },
    "ByteBasicTest": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/integercompression/ByteBasicTest.java",
        "94-123:varyingLengthTest2_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "105-111:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "113-119:uncompress1"
            }
        ],
        "69-91:varyingLengthTest_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "105-111:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "113-119:uncompress1"
            }
        ],
        "45-66:saulTest_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.ByteIntegerCODEC",
                "class": "ByteIntegerCODEC",
                "method": "36-38:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.ByteIntegerCODEC",
                "class": "ByteIntegerCODEC",
                "method": "57-59:uncompress1"
            }
        ]
    },
    "LongBasicTest": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/longcompression/LongBasicTest.java",
        "322-336:fastPfor128Test_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "79-85:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "87-93:uncompress0"
            }
        ],
        "305-319:fastPforTest_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "79-85:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "87-93:uncompress0"
            }
        ],
        "255-302:varyingLengthTest2_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "79-85:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "87-93:uncompress0"
            }
        ],
        "224-252:varyingLengthTest_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "79-85:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "87-93:uncompress0"
            }
        ],
        "199-221:saulTest_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "38-40:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "59-61:uncompress1"
            }
        ],
        "125-153:testUnsorted": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "38-40:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "59-61:uncompress1"
            }
        ],
        "172-187:testUnsorted3": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "38-40:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "59-61:uncompress1"
            }
        ],
        "155-170:testUnsorted2": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "38-40:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "59-61:uncompress1"
            }
        ],
        "81-119:testCodec": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                "class": "LongDelta",
                "method": "24-28:delta0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "38-40:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "59-61:uncompress1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.differential.LongDelta",
                "class": "LongDelta",
                "method": "97-113:fastinverseDelta0"
            }
        ],
        "67-79:testZeroInZeroOut": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "38-40:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "59-61:uncompress1"
            }
        ],
        "56-65:testSpurious": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "38-40:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            }
        ]
    },
    "PForDeltaUnpack128": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/com/kamikaze/pfordelta/PForDeltaUnpack128.java",
        "10-66:unpack": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "68-69:unpack0"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "71-111:unpack1"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "113-154:unpack2"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "156-200:unpack3"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "202-245:unpack4"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "247-295:unpack5"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "297-346:unpack6"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "348-400:unpack7"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "402-449:unpack8"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "451-507:unpack9"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "509-566:unpack10"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "568-628:unpack11"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "630-689:unpack12"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "691-755:unpack13"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "757-812:unpack16"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "814-889:unpack20"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "891-982:unpack28"
            }
        ],
        "891-982:unpack28": [],
        "814-889:unpack20": [],
        "757-812:unpack16": [],
        "691-755:unpack13": [],
        "630-689:unpack12": [],
        "568-628:unpack11": [],
        "509-566:unpack10": [],
        "451-507:unpack9": [],
        "402-449:unpack8": [],
        "348-400:unpack7": [],
        "297-346:unpack6": [],
        "247-295:unpack5": [],
        "202-245:unpack4": [],
        "156-200:unpack3": [],
        "113-154:unpack2": [],
        "71-111:unpack1": [],
        "68-69:unpack0": []
    },
    "IntegratedIntegerCODEC": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/differential/IntegratedIntegerCODEC.java"
    },
    "OptPFD": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/OptPFD.java",
        "196-198:toString": [],
        "187-194:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "142-148:headlessUncompress"
            }
        ],
        "176-184:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "47-53:headlessCompress"
            }
        ],
        "142-148:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "150-174:decodePage"
            }
        ],
        "47-53:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "101-139:encodePage"
            }
        ],
        "43-44:OptPFD": [],
        "150-174:decodePage": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.S16",
                "class": "S16",
                "method": "167-177:uncompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3021-3127:fastunpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "101-139:encodePage": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "61-99:getBestBFromData"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.S16",
                "class": "S16",
                "method": "34-45:compress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "42-148:fastpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "61-99:getBestBFromData": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "36-41:maxbits"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.S16",
                "class": "S16",
                "method": "58-70:estimatecompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ]
    },
    "IntegratedByteIntegerCODEC": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/differential/IntegratedByteIntegerCODEC.java"
    },
    "IntegratedBinaryPacking": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/differential/IntegratedBinaryPacking.java",
        "130-172:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1701-1808:integratedunpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "81-127:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "93-100:maxdiffbits"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "39-145:integratedpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "76-78:toString": [],
        "66-73:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                "class": "IntegratedBinaryPacking",
                "method": "130-172:headlessUncompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            }
        ],
        "55-63:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBinaryPacking",
                "class": "IntegratedBinaryPacking",
                "method": "81-127:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            }
        ]
    },
    "SkippableLongBasicTest": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/longcompression/SkippableLongBasicTest.java",
        "107-147:varyingLengthTest2_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "113-119:compressHeadless"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "121-128:uncompressHeadless"
            }
        ],
        "81-104:varyingLengthTest_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "113-119:compressHeadless"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "121-128:uncompressHeadless"
            }
        ],
        "47-78:consistentTest_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.SkippableLongCODEC",
                "class": "SkippableLongCODEC",
                "method": "45-47:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.SkippableLongCODEC",
                "class": "SkippableLongCODEC",
                "method": "67-69:headlessUncompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            }
        ]
    },
    "JustCopy": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/JustCopy.java",
        "46-49:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.JustCopy",
                "class": "JustCopy",
                "method": "18-23:headlessCompress"
            }
        ],
        "37-43:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "32-34:toString": [],
        "26-29:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.JustCopy",
                "class": "JustCopy",
                "method": "37-43:headlessUncompress"
            }
        ],
        "18-23:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ]
    },
    "OptPFDS16": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/OptPFDS16.java",
        "196-198:toString": [],
        "187-194:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "142-148:headlessUncompress"
            }
        ],
        "176-184:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "46-54:headlessCompress"
            }
        ],
        "142-148:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "150-174:decodePage"
            }
        ],
        "46-54:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "101-139:encodePage"
            }
        ],
        "42-43:OptPFDS16": [],
        "150-174:decodePage": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.S16",
                "class": "S16",
                "method": "167-177:uncompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3021-3127:fastunpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "101-139:encodePage": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "62-99:getBestBFromData"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.S16",
                "class": "S16",
                "method": "34-45:compress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "42-148:fastpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "62-99:getBestBFromData": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "36-41:maxbits"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.S16",
                "class": "S16",
                "method": "58-70:estimatecompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ]
    },
    "LongCODEC": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/longcompression/LongCODEC.java",
        "59-61:uncompress1": [],
        "38-40:compress0": []
    },
    "LongClusteredDataGenerator": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/longcompression/synth/LongClusteredDataGenerator.java",
        "28-29:LongClusteredDataGenerator": []
    },
    "LongDelta": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/longcompression/differential/LongDelta.java",
        "129-148:fastinverseDelta1": [],
        "97-113:fastinverseDelta0": [],
        "84-88:inverseDelta": [],
        "68-75:delta2": [],
        "43-50:delta1": [],
        "24-28:delta0": []
    },
    "LongUtil": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/longcompression/LongUtil.java",
        "19-21:longToBinaryWithLeading": []
    },
    "BenchmarkSkippable": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/benchmarktools/BenchmarkSkippable.java",
        "242-268:main": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkSkippable",
                "class": "BenchmarkSkippable",
                "method": "318-338:test"
            }
        ],
        "318-338:test": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.synth.ClusteredDataGenerator",
                "class": "ClusteredDataGenerator",
                "method": "25-26:ClusteredDataGenerator"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkSkippable",
                "class": "BenchmarkSkippable",
                "method": "280-288:generateTestData"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkSkippable",
                "class": "BenchmarkSkippable",
                "method": "123-232:testCodec"
            }
        ],
        "280-288:generateTestData": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.synth.ClusteredDataGenerator",
                "class": "ClusteredDataGenerator",
                "method": "69-73:generateClustered"
            }
        ],
        "123-232:testCodec": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkSkippable",
                "class": "BenchmarkSkippable",
                "method": "46-73:compressWithSkipTable"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkSkippable",
                "class": "BenchmarkSkippable",
                "method": "75-107:decompressFromSkipTable"
            }
        ],
        "75-107:decompressFromSkipTable": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "66-68:headlessUncompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                "class": "Delta",
                "method": "129-148:fastinverseDelta1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC",
                "class": "SkippableIntegratedIntegerCODEC",
                "method": "71-73:headlessUncompress"
            }
        ],
        "46-73:compressWithSkipTable": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                "class": "Delta",
                "method": "43-50:delta1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "44-46:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC",
                "class": "SkippableIntegratedIntegerCODEC",
                "method": "48-50:headlessCompress"
            }
        ]
    },
    "IntegratedBitPacking": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/differential/IntegratedBitPacking.java",
        "3847-3912:integratedunpack9": [],
        "3780-3845:integratedunpack8": [],
        "3713-3778:integratedunpack7": [],
        "3646-3711:integratedunpack6": [],
        "3579-3644:integratedunpack5": [],
        "3512-3577:integratedunpack4": [],
        "3505-3510:integratedunpack32": [],
        "3437-3503:integratedunpack31": [],
        "3369-3435:integratedunpack30": [],
        "3302-3367:integratedunpack3": [],
        "3234-3300:integratedunpack29": [],
        "3167-3232:integratedunpack28": [],
        "3099-3165:integratedunpack27": [],
        "3031-3097:integratedunpack26": [],
        "2963-3029:integratedunpack25": [],
        "2897-2961:integratedunpack24": [],
        "2829-2895:integratedunpack23": [],
        "2761-2827:integratedunpack22": [],
        "2693-2759:integratedunpack21": [],
        "2625-2691:integratedunpack20": [],
        "2558-2623:integratedunpack2": [],
        "2490-2556:integratedunpack19": [],
        "2422-2488:integratedunpack18": [],
        "2354-2420:integratedunpack17": [],
        "2286-2352:integratedunpack16": [],
        "2218-2284:integratedunpack15": [],
        "2150-2216:integratedunpack14": [],
        "2083-2148:integratedunpack13": [],
        "2016-2081:integratedunpack12": [],
        "1949-2014:integratedunpack11": [],
        "1882-1947:integratedunpack10": [],
        "1815-1880:integratedunpack1": [],
        "1810-1813:integratedunpack0": [],
        "1701-1808:integratedunpack": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1810-1813:integratedunpack0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1815-1880:integratedunpack1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "2558-2623:integratedunpack2"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "3302-3367:integratedunpack3"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "3512-3577:integratedunpack4"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "3579-3644:integratedunpack5"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "3646-3711:integratedunpack6"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "3713-3778:integratedunpack7"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "3780-3845:integratedunpack8"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "3847-3912:integratedunpack9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1882-1947:integratedunpack10"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1949-2014:integratedunpack11"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "2016-2081:integratedunpack12"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "2083-2148:integratedunpack13"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "2150-2216:integratedunpack14"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "2218-2284:integratedunpack15"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "2286-2352:integratedunpack16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "2354-2420:integratedunpack17"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "2422-2488:integratedunpack18"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "2490-2556:integratedunpack19"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "2625-2691:integratedunpack20"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "2693-2759:integratedunpack21"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "2761-2827:integratedunpack22"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "2829-2895:integratedunpack23"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "2897-2961:integratedunpack24"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "2963-3029:integratedunpack25"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "3031-3097:integratedunpack26"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "3099-3165:integratedunpack27"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "3167-3232:integratedunpack28"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "3234-3300:integratedunpack29"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "3369-3435:integratedunpack30"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "3437-3503:integratedunpack31"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "3505-3510:integratedunpack32"
            }
        ],
        "1647-1689:integratedpack9": [],
        "1611-1645:integratedpack8": [],
        "1569-1609:integratedpack7": [],
        "1529-1567:integratedpack6": [],
        "1489-1527:integratedpack5": [],
        "1453-1487:integratedpack4": [],
        "1446-1451:integratedpack32": [],
        "1380-1444:integratedpack31": [],
        "1316-1378:integratedpack30": [],
        "1278-1314:integratedpack3": [],
        "1214-1276:integratedpack29": [],
        "1154-1212:integratedpack28": [],
        "1092-1152:integratedpack27": [],
        "1032-1090:integratedpack26": [],
        "972-1030:integratedpack25": [],
        "920-970:integratedpack24": [],
        "862-918:integratedpack23": [],
        "806-860:integratedpack22": [],
        "750-804:integratedpack21": [],
        "698-748:integratedpack20": [],
        "662-696:integratedpack2": [],
        "608-660:integratedpack19": [],
        "556-606:integratedpack18": [],
        "504-554:integratedpack17": [],
        "468-502:integratedpack16": [],
        "418-466:integratedpack15": [],
        "370-416:integratedpack14": [],
        "322-368:integratedpack13": [],
        "278-320:integratedpack12": [],
        "232-276:integratedpack11": [],
        "188-230:integratedpack10": [],
        "152-186:integratedpack1": [],
        "147-150:integratedpack0": [],
        "39-145:integratedpack": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "147-150:integratedpack0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "152-186:integratedpack1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "662-696:integratedpack2"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1278-1314:integratedpack3"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1453-1487:integratedpack4"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1489-1527:integratedpack5"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1529-1567:integratedpack6"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1569-1609:integratedpack7"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1611-1645:integratedpack8"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1647-1689:integratedpack9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "188-230:integratedpack10"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "232-276:integratedpack11"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "278-320:integratedpack12"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "322-368:integratedpack13"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "370-416:integratedpack14"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "418-466:integratedpack15"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "468-502:integratedpack16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "504-554:integratedpack17"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "556-606:integratedpack18"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "608-660:integratedpack19"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "698-748:integratedpack20"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "750-804:integratedpack21"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "806-860:integratedpack22"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "862-918:integratedpack23"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "920-970:integratedpack24"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "972-1030:integratedpack25"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1032-1090:integratedpack26"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1092-1152:integratedpack27"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1154-1212:integratedpack28"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1214-1276:integratedpack29"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1316-1378:integratedpack30"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1380-1444:integratedpack31"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1446-1451:integratedpack32"
            }
        ]
    },
    "NewPFDS16": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/NewPFDS16.java",
        "180-182:toString": [],
        "171-178:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "126-132:headlessUncompress"
            }
        ],
        "160-168:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "48-54:headlessCompress"
            }
        ],
        "126-132:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "134-158:decodePage"
            }
        ],
        "48-54:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "86-123:encodePage"
            }
        ],
        "44-45:NewPFDS16": [],
        "134-158:decodePage": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.S16",
                "class": "S16",
                "method": "167-177:uncompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3021-3127:fastunpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "86-123:encodePage": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "62-84:getBestBFromData"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.S16",
                "class": "S16",
                "method": "34-45:compress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "42-148:fastpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "62-84:getBestBFromData": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "36-41:maxbits"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ]
    },
    "NewPFDS9": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/NewPFDS9.java",
        "179-181:toString": [],
        "170-177:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "125-131:headlessUncompress"
            }
        ],
        "159-167:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "47-53:headlessCompress"
            }
        ],
        "125-131:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "133-157:decodePage"
            }
        ],
        "47-53:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "85-122:encodePage"
            }
        ],
        "43-44:NewPFDS9": [],
        "133-157:decodePage": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.S9",
                "class": "S9",
                "method": "124-197:uncompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3021-3127:fastunpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "85-122:encodePage": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "61-83:getBestBFromData"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.S9",
                "class": "S9",
                "method": "76-106:compress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "42-148:fastpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "61-83:getBestBFromData": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "36-41:maxbits"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ]
    },
    "SkippableBasicTest": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/integercompression/SkippableBasicTest.java",
        "114-153:varyingLengthTest2_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "121-127:compressHeadless"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "129-136:uncompressHeadless"
            }
        ],
        "88-111:varyingLengthTest_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "121-127:compressHeadless"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "129-136:uncompressHeadless"
            }
        ],
        "54-85:consistentTest_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "44-46:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "66-68:headlessUncompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            }
        ]
    },
    "XorBinaryPackingTest": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/integercompression/XorBinaryPackingTest.java",
        "112-118:compressAndUncompress5_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.XorBinaryPackingTest",
                "class": "XorBinaryPackingTest",
                "method": "31-36:checkCompressAndUncompress"
            }
        ],
        "104-109:compressAndUncompress4_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.XorBinaryPackingTest",
                "class": "XorBinaryPackingTest",
                "method": "31-36:checkCompressAndUncompress"
            }
        ],
        "96-101:compressAndUncompress3_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.XorBinaryPackingTest",
                "class": "XorBinaryPackingTest",
                "method": "31-36:checkCompressAndUncompress"
            }
        ],
        "87-93:compressAndUncompress2_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.XorBinaryPackingTest",
                "class": "XorBinaryPackingTest",
                "method": "31-36:checkCompressAndUncompress"
            }
        ],
        "78-84:compressAndUncompress1_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.XorBinaryPackingTest",
                "class": "XorBinaryPackingTest",
                "method": "31-36:checkCompressAndUncompress"
            }
        ],
        "68-75:compressAndUncompress0_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.XorBinaryPackingTest",
                "class": "XorBinaryPackingTest",
                "method": "31-36:checkCompressAndUncompress"
            }
        ],
        "23-25:XorBinaryPackingTest": [],
        "31-36:checkCompressAndUncompress": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "87-93:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.integercompression.TestUtils",
                "class": "TestUtils",
                "method": "95-101:uncompress0"
            }
        ]
    },
    "SkippableComposition": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/SkippableComposition.java",
        "65-67:toString": [],
        "52-62:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "66-68:headlessUncompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            }
        ],
        "38-49:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "44-46:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            }
        ],
        "31-35:SkippableComposition": []
    },
    "DeltaZigzagVariableByte": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/DeltaZigzagVariableByte.java",
        "102-129:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Decoder",
                "method": "66-68:Decoder"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Decoder",
                "method": "70-75:decodeInt"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "24-99:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagVariableByte",
                "class": "DeltaZigzagVariableByte",
                "method": "138-140:makeBuffer"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Encoder",
                "method": "31-33:Encoder"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.DeltaZigzagEncoding",
                "class": "Encoder",
                "method": "35-39:encodeInt"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "19-21:toString": [],
        "138-140:makeBuffer": []
    },
    "S16": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/S16.java",
        "167-177:uncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.S16",
                "class": "S16",
                "method": "140-149:decompressblock"
            }
        ],
        "140-149:decompressblock": [],
        "88-106:compressblock": [],
        "58-70:estimatecompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.S16",
                "class": "S16",
                "method": "108-123:fakecompressblock"
            }
        ],
        "34-45:compress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.S16",
                "class": "S16",
                "method": "88-106:compressblock"
            }
        ],
        "179-187:shiftme": [],
        "108-123:fakecompressblock": []
    },
    "LongComposition": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/longcompression/LongComposition.java",
        "67-69:toString": [],
        "56-64:uncompress1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "59-61:uncompress1"
            }
        ],
        "39-53:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "38-40:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            }
        ],
        "33-36:LongComposition": []
    },
    "FastPFOR128": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/FastPFOR128.java",
        "322-324:toString": [],
        "312-319:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "211-222:headlessUncompress"
            }
        ],
        "301-309:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "85-94:headlessCompress"
            }
        ],
        "211-222:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "224-298:decodePage"
            }
        ],
        "85-94:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "125-201:encodePage"
            }
        ],
        "333-335:makeBuffer": [],
        "71-73:FastPFOR1281": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "62-70:FastPFOR128"
            }
        ],
        "62-70:FastPFOR128": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "333-335:makeBuffer"
            }
        ],
        "224-298:decodePage": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3021-3127:fastunpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "125-201:encodePage": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "96-123:getBestBFromData"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "42-148:fastpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "96-123:getBestBFromData": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "109-111:bits"
            }
        ]
    },
    "ByteLongCODEC": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/longcompression/ByteLongCODEC.java",
        "59-61:uncompress1": [],
        "38-40:compress1": []
    },
    "Benchmark": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/benchmarktools/Benchmark.java",
        "350-447:testKamikaze": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                "class": "Delta",
                "method": "24-28:delta0"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDelta",
                "class": "PForDelta",
                "method": "70-102:compressOneBlockOpt"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDelta",
                "class": "PForDelta",
                "method": "115-152:decompressOneBlock"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                "class": "Delta",
                "method": "97-113:fastinverseDelta0"
            }
        ],
        "308-338:main": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.Benchmark",
                "class": "Benchmark",
                "method": "482-690:test"
            }
        ],
        "482-690:test": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.synth.ClusteredDataGenerator",
                "class": "ClusteredDataGenerator",
                "method": "25-26:ClusteredDataGenerator"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.Benchmark",
                "class": "Benchmark",
                "method": "459-468:generateTestData"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.Benchmark",
                "class": "Benchmark",
                "method": "70-178:testCodec"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.Benchmark",
                "class": "Benchmark",
                "method": "350-447:testKamikaze"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.Benchmark",
                "class": "Benchmark",
                "method": "194-299:testByteCodec"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "45-46:NewPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS9",
                "class": "NewPFDS9",
                "method": "43-44:NewPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFDS16",
                "class": "NewPFDS16",
                "method": "44-45:NewPFDS16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFD",
                "class": "OptPFD",
                "method": "43-44:OptPFD"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "42-43:OptPFDS9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS16",
                "class": "OptPFDS16",
                "method": "42-43:OptPFDS16"
            }
        ],
        "459-468:generateTestData": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.synth.ClusteredDataGenerator",
                "class": "ClusteredDataGenerator",
                "method": "69-73:generateClustered"
            }
        ],
        "194-299:testByteCodec": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                "class": "Delta",
                "method": "24-28:delta0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.ByteIntegerCODEC",
                "class": "ByteIntegerCODEC",
                "method": "36-38:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.ByteIntegerCODEC",
                "class": "ByteIntegerCODEC",
                "method": "57-59:uncompress1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                "class": "Delta",
                "method": "97-113:fastinverseDelta0"
            }
        ],
        "70-178:testCodec": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                "class": "Delta",
                "method": "24-28:delta0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                "class": "Delta",
                "method": "97-113:fastinverseDelta0"
            }
        ]
    },
    "LongJustCopy": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/longcompression/LongJustCopy.java",
        "47-50:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongJustCopy",
                "class": "LongJustCopy",
                "method": "19-24:headlessCompress"
            }
        ],
        "38-44:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "33-35:toString": [],
        "27-30:uncompress1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongJustCopy",
                "class": "LongJustCopy",
                "method": "38-44:headlessUncompress"
            }
        ],
        "19-24:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ]
    },
    "UncompressibleInputException": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/UncompressibleInputException.java",
        "13-15:UncompressibleInputException": []
    },
    "PForDelta": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/com/kamikaze/pfordelta/PForDelta.java",
        "431-440:readBits": [],
        "406-413:decompressBBitSlotsWithHardCodes": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "10-66:unpack"
            }
        ],
        "379-390:writeBits": [],
        "352-364:decompressBlockByS16": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.Simple16",
                "class": "Simple16",
                "method": "128-139:s16Decompress"
            }
        ],
        "298-309:decompressBBitSlots": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDelta",
                "class": "PForDelta",
                "method": "431-440:readBits"
            }
        ],
        "217-282:compressOneBlock": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDelta",
                "class": "PForDelta",
                "method": "379-390:writeBits"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDelta",
                "class": "PForDelta",
                "method": "324-336:compressBlockByS16"
            }
        ],
        "195-203:checkBigNumbers": [],
        "165-180:estimateCompressedSize": [],
        "115-152:decompressOneBlock": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDelta",
                "class": "PForDelta",
                "method": "298-309:decompressBBitSlots"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDelta",
                "class": "PForDelta",
                "method": "352-364:decompressBlockByS16"
            }
        ],
        "70-102:compressOneBlockOpt": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDelta",
                "class": "PForDelta",
                "method": "195-203:checkBigNumbers"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDelta",
                "class": "PForDelta",
                "method": "165-180:estimateCompressedSize"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDelta",
                "class": "PForDelta",
                "method": "217-282:compressOneBlock"
            }
        ],
        "324-336:compressBlockByS16": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.Simple16",
                "class": "Simple16",
                "method": "84-111:s16Compress"
            }
        ]
    },
    "UniformDataGenerator": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/synth/UniformDataGenerator.java",
        "90-97:generateUniform": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.synth.UniformDataGenerator",
                "class": "UniformDataGenerator",
                "method": "66-79:negate"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.synth.UniformDataGenerator",
                "class": "UniformDataGenerator",
                "method": "90-97:generateUniform"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.synth.UniformDataGenerator",
                "class": "UniformDataGenerator",
                "method": "102-120:generateUniformBitmap"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.synth.UniformDataGenerator",
                "class": "UniformDataGenerator",
                "method": "49-61:generateUniformHash"
            }
        ],
        "66-79:negate": [],
        "24-33:UniformDataGenerator": [],
        "102-120:generateUniformBitmap": [],
        "49-61:generateUniformHash": []
    },
    "BenchmarkBitPacking": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/benchmarktools/BenchmarkBitPacking.java",
        "145-152:main": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkBitPacking",
                "class": "BenchmarkBitPacking",
                "method": "70-137:testWithDeltas"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkBitPacking",
                "class": "BenchmarkBitPacking",
                "method": "25-68:test"
            }
        ],
        "70-137:testWithDeltas": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                "class": "Delta",
                "method": "24-28:delta0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1706-1812:fastpackwithoutmask"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3021-3127:fastunpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.Delta",
                "class": "Delta",
                "method": "97-113:fastinverseDelta0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "39-145:integratedpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedBitPacking",
                "class": "IntegratedBitPacking",
                "method": "1701-1808:integratedunpack"
            }
        ],
        "25-68:test": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "42-148:fastpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1706-1812:fastpackwithoutmask"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3021-3127:fastunpack"
            }
        ]
    },
    "GroupSimple9": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/GroupSimple9.java",
        "3057-3551:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2664-2723:decode0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2617-2662:decode1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2575-2615:decode2"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2535-2573:decode3"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2497-2533:decode4"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2460-2495:decode5"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2424-2458:decode6"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2389-2422:decode7"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2355-2387:decode8"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2308-2353:decode9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2275-2306:decode10"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2246-2273:decode11"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2219-2244:decode12"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2194-2217:decode13"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2171-2192:decode14"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2149-2169:decode15"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2128-2147:decode16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2108-2126:decode17"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2066-2106:decode18"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2038-2064:decode19"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2015-2036:decode20"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1994-2013:decode21"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1975-1992:decode22"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1957-1973:decode23"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1940-1955:decode24"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1924-1938:decode25"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1909-1922:decode26"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1869-1907:decode27"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1843-1867:decode28"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1822-1841:decode29"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1803-1820:decode30"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1786-1801:decode31"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1770-1784:decode32"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1755-1768:decode33"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1741-1753:decode34"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1728-1739:decode35"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1690-1726:decode36"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1666-1688:decode37"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1647-1664:decode38"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1630-1645:decode39"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1615-1628:decode40"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1601-1613:decode41"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1588-1599:decode42"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1576-1586:decode43"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1565-1574:decode44"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1528-1563:decode45"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1505-1526:decode46"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1487-1503:decode47"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1471-1485:decode48"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1457-1469:decode49"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1444-1455:decode50"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1432-1442:decode51"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1421-1430:decode52"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1411-1419:decode53"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1375-1409:decode54"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1353-1373:decode55"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1336-1351:decode56"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1321-1334:decode57"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1308-1319:decode58"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1296-1306:decode59"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1285-1294:decode60"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1275-1283:decode61"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1266-1273:decode62"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1231-1264:decode63"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1210-1229:decode64"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1194-1208:decode65"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1180-1192:decode66"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1168-1178:decode67"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1157-1166:decode68"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1147-1155:decode69"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1138-1145:decode70"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1130-1136:decode71"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1096-1128:decode72"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1076-1094:decode73"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1061-1074:decode74"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1048-1059:decode75"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1037-1046:decode76"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1027-1035:decode77"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1018-1025:decode78"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1010-1016:decode79"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "1003-1008:decode80"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "2736-3054:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "20-22:smallerorequalthan"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "31-41:encode0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "43-53:encode1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "55-65:encode2"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "67-77:encode3"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "79-89:encode4"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "91-101:encode5"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "103-113:encode6"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "115-125:encode7"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "127-137:encode8"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "139-150:encode9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "152-165:encode10"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "167-178:encode11"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "180-191:encode12"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "193-204:encode13"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "206-217:encode14"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "219-230:encode15"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "232-243:encode16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "245-256:encode17"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "258-269:encode18"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "271-282:encode19"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "284-295:encode20"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "297-307:encode21"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "309-319:encode22"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "321-331:encode23"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "333-343:encode24"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "345-355:encode25"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "357-367:encode26"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "369-379:encode27"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "381-391:encode28"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "393-403:encode29"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "405-415:encode30"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "417-427:encode31"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "429-439:encode32"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "441-451:encode33"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "453-463:encode34"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "465-475:encode35"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "477-487:encode36"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "489-499:encode37"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "501-511:encode38"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "513-523:encode39"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "525-535:encode40"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "537-547:encode41"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "549-559:encode42"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "561-571:encode43"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "573-583:encode44"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "585-595:encode45"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "597-607:encode46"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "609-619:encode47"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "621-631:encode48"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "633-643:encode49"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "645-655:encode50"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "657-667:encode51"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "669-679:encode52"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "681-691:encode53"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "693-703:encode54"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "705-715:encode55"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "717-727:encode56"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "729-739:encode57"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "741-751:encode58"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "753-763:encode59"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "765-775:encode60"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "777-787:encode61"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "789-799:encode62"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "801-811:encode63"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "813-822:encode64"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "824-833:encode65"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "835-844:encode66"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "846-855:encode67"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "857-866:encode68"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "868-877:encode69"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "879-888:encode70"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "890-899:encode71"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "901-910:encode72"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "912-920:encode73"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "922-930:encode74"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "932-940:encode75"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "942-950:encode76"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "952-960:encode77"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "962-970:encode78"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "972-980:encode79"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "982-990:encode80"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "2731-2733:toString": [],
        "993-999:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "3057-3551:headlessUncompress"
            }
        ],
        "23-29:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.GroupSimple9",
                "class": "GroupSimple9",
                "method": "2736-3054:headlessCompress"
            }
        ],
        "2664-2723:decode0": [],
        "2617-2662:decode1": [],
        "2575-2615:decode2": [],
        "2535-2573:decode3": [],
        "2497-2533:decode4": [],
        "2460-2495:decode5": [],
        "2424-2458:decode6": [],
        "2389-2422:decode7": [],
        "2355-2387:decode8": [],
        "2308-2353:decode9": [],
        "2275-2306:decode10": [],
        "2246-2273:decode11": [],
        "2219-2244:decode12": [],
        "2194-2217:decode13": [],
        "2171-2192:decode14": [],
        "2149-2169:decode15": [],
        "2128-2147:decode16": [],
        "2108-2126:decode17": [],
        "2066-2106:decode18": [],
        "2038-2064:decode19": [],
        "2015-2036:decode20": [],
        "1994-2013:decode21": [],
        "1975-1992:decode22": [],
        "1957-1973:decode23": [],
        "1940-1955:decode24": [],
        "1924-1938:decode25": [],
        "1909-1922:decode26": [],
        "1869-1907:decode27": [],
        "1843-1867:decode28": [],
        "1822-1841:decode29": [],
        "1803-1820:decode30": [],
        "1786-1801:decode31": [],
        "1770-1784:decode32": [],
        "1755-1768:decode33": [],
        "1741-1753:decode34": [],
        "1728-1739:decode35": [],
        "1690-1726:decode36": [],
        "1666-1688:decode37": [],
        "1647-1664:decode38": [],
        "1630-1645:decode39": [],
        "1615-1628:decode40": [],
        "1601-1613:decode41": [],
        "1588-1599:decode42": [],
        "1576-1586:decode43": [],
        "1565-1574:decode44": [],
        "1528-1563:decode45": [],
        "1505-1526:decode46": [],
        "1487-1503:decode47": [],
        "1471-1485:decode48": [],
        "1457-1469:decode49": [],
        "1444-1455:decode50": [],
        "1432-1442:decode51": [],
        "1421-1430:decode52": [],
        "1411-1419:decode53": [],
        "1375-1409:decode54": [],
        "1353-1373:decode55": [],
        "1336-1351:decode56": [],
        "1321-1334:decode57": [],
        "1308-1319:decode58": [],
        "1296-1306:decode59": [],
        "1285-1294:decode60": [],
        "1275-1283:decode61": [],
        "1266-1273:decode62": [],
        "1231-1264:decode63": [],
        "1210-1229:decode64": [],
        "1194-1208:decode65": [],
        "1180-1192:decode66": [],
        "1168-1178:decode67": [],
        "1157-1166:decode68": [],
        "1147-1155:decode69": [],
        "1138-1145:decode70": [],
        "1130-1136:decode71": [],
        "1096-1128:decode72": [],
        "1076-1094:decode73": [],
        "1061-1074:decode74": [],
        "1048-1059:decode75": [],
        "1037-1046:decode76": [],
        "1027-1035:decode77": [],
        "1018-1025:decode78": [],
        "1010-1016:decode79": [],
        "1003-1008:decode80": [],
        "982-990:encode80": [],
        "972-980:encode79": [],
        "962-970:encode78": [],
        "952-960:encode77": [],
        "942-950:encode76": [],
        "932-940:encode75": [],
        "922-930:encode74": [],
        "912-920:encode73": [],
        "901-910:encode72": [],
        "890-899:encode71": [],
        "879-888:encode70": [],
        "868-877:encode69": [],
        "857-866:encode68": [],
        "846-855:encode67": [],
        "835-844:encode66": [],
        "824-833:encode65": [],
        "813-822:encode64": [],
        "801-811:encode63": [],
        "789-799:encode62": [],
        "777-787:encode61": [],
        "765-775:encode60": [],
        "753-763:encode59": [],
        "741-751:encode58": [],
        "729-739:encode57": [],
        "717-727:encode56": [],
        "705-715:encode55": [],
        "693-703:encode54": [],
        "681-691:encode53": [],
        "669-679:encode52": [],
        "657-667:encode51": [],
        "645-655:encode50": [],
        "633-643:encode49": [],
        "621-631:encode48": [],
        "609-619:encode47": [],
        "597-607:encode46": [],
        "585-595:encode45": [],
        "573-583:encode44": [],
        "561-571:encode43": [],
        "549-559:encode42": [],
        "537-547:encode41": [],
        "525-535:encode40": [],
        "513-523:encode39": [],
        "501-511:encode38": [],
        "489-499:encode37": [],
        "477-487:encode36": [],
        "465-475:encode35": [],
        "453-463:encode34": [],
        "441-451:encode33": [],
        "429-439:encode32": [],
        "417-427:encode31": [],
        "405-415:encode30": [],
        "393-403:encode29": [],
        "381-391:encode28": [],
        "369-379:encode27": [],
        "357-367:encode26": [],
        "345-355:encode25": [],
        "333-343:encode24": [],
        "321-331:encode23": [],
        "309-319:encode22": [],
        "297-307:encode21": [],
        "284-295:encode20": [],
        "271-282:encode19": [],
        "258-269:encode18": [],
        "245-256:encode17": [],
        "232-243:encode16": [],
        "219-230:encode15": [],
        "206-217:encode14": [],
        "193-204:encode13": [],
        "180-191:encode12": [],
        "167-178:encode11": [],
        "152-165:encode10": [],
        "139-150:encode9": [],
        "127-137:encode8": [],
        "115-125:encode7": [],
        "103-113:encode6": [],
        "91-101:encode5": [],
        "79-89:encode4": [],
        "67-77:encode3": [],
        "55-65:encode2": [],
        "43-53:encode1": [],
        "31-41:encode0": []
    },
    "TestLongVariableByte": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/longcompression/TestLongVariableByte.java",
        "106-110:testCodec_intermediateHighPowerOfTwo_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "79-85:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "97-103:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "113-119:compressHeadless"
            }
        ],
        "100-103:testCodec_intermediateHighPowerOfTwo_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "79-85:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "97-103:compress0"
            }
        ],
        "95-97:testCodec_intermediateHighPowerOfTwo_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "79-85:compress1"
            }
        ],
        "88-92:testCodec_ZeroThenAllPowerOfTwo_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongVariableByte",
                "class": "TestLongVariableByte",
                "method": "23-45:checkConsistency"
            }
        ],
        "80-85:testCodec_allPowerOfTwo_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongVariableByte",
                "class": "TestLongVariableByte",
                "method": "23-45:checkConsistency"
            }
        ],
        "75-77:testCodec_ZeroMinValue_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongVariableByte",
                "class": "TestLongVariableByte",
                "method": "23-45:checkConsistency"
            }
        ],
        "70-72:testCodec_MinValue_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongVariableByte",
                "class": "TestLongVariableByte",
                "method": "23-45:checkConsistency"
            }
        ],
        "64-67:testCodec_ZeroTimes128Minus1_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongVariableByte",
                "class": "TestLongVariableByte",
                "method": "23-45:checkConsistency"
            }
        ],
        "58-61:testCodec_ZeroTimes127Minus1_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongVariableByte",
                "class": "TestLongVariableByte",
                "method": "23-45:checkConsistency"
            }
        ],
        "53-55:testCodec_ZeroTimes8Minus1_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongVariableByte",
                "class": "TestLongVariableByte",
                "method": "23-45:checkConsistency"
            }
        ],
        "48-50:testCodec_ZeroMinus1_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongVariableByte",
                "class": "TestLongVariableByte",
                "method": "23-45:checkConsistency"
            }
        ],
        "23-45:checkConsistency": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "79-85:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "87-93:uncompress0"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "97-103:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "105-111:uncompress1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "113-119:compressHeadless"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "121-128:uncompressHeadless"
            }
        ]
    },
    "CompressionMode": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/benchmarktools/BenchmarkCSV.java"
    },
    "BenchmarkCSV": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/benchmarktools/BenchmarkCSV.java",
        "130-180:main": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkCSV",
                "class": "BenchmarkCSV",
                "method": "31-116:loadIntegers"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkCSV",
                "class": "BenchmarkCSV",
                "method": "182-246:bench"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkCSV",
                "class": "BenchmarkCSV",
                "method": "248-312:bytebench"
            }
        ],
        "248-312:bytebench": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.ByteIntegerCODEC",
                "class": "ByteIntegerCODEC",
                "method": "36-38:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.ByteIntegerCODEC",
                "class": "ByteIntegerCODEC",
                "method": "57-59:uncompress1"
            }
        ],
        "182-246:bench": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            }
        ],
        "31-116:loadIntegers": []
    },
    "Format": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/benchmarktools/BenchmarkCSV.java"
    },
    "LCPForDelta": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/com/kamikaze/pfordelta/LCPForDelta.java",
        "619-628:readBitsWithBuffer": [],
        "608-617:readBits": [],
        "579-590:writeBits": [],
        "552-564:decompressBlockByS16WithIntBufferIntegrated": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.Simple16WithHardCodes",
                "class": "Simple16WithHardCodes",
                "method": "209-223:s16DecompressWithIntBufferIntegrated"
            }
        ],
        "540-550:decompressBlockByS16WithIntBuffer": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.Simple16WithHardCodes",
                "class": "Simple16WithHardCodes",
                "method": "186-200:s16DecompressWithIntBuffer"
            }
        ],
        "526-538:decompressBlockByS16": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.Simple16",
                "class": "Simple16",
                "method": "128-139:s16Decompress"
            }
        ],
        "475-481:decompressBBitSlotsWithHardCodesWithIntBuffer": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "17-73:unpack"
            }
        ],
        "466-473:decompressBBitSlotsWithHardCodes": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128",
                "class": "PForDeltaUnpack128",
                "method": "10-66:unpack"
            }
        ],
        "453-464:decompressBBitSlots": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                "class": "LCPForDelta",
                "method": "608-617:readBits"
            }
        ],
        "429-437:checkBigNumbers": [],
        "399-414:estimateCompressedSize": [],
        "350-386:decompressOneBlockWithSizeWithIntBuffer": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "17-73:unpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.Simple16WithHardCodes",
                "class": "Simple16WithHardCodes",
                "method": "202-207:s16DecompressWithIntBufferWithHardCodes"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.Simple16WithHardCodes",
                "class": "Simple16WithHardCodes",
                "method": "225-231:s16DecompressWithIntBufferIntegrated2"
            }
        ],
        "312-348:decompressOneBlockWithSize": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                "class": "LCPForDelta",
                "method": "453-464:decompressBBitSlots"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                "class": "LCPForDelta",
                "method": "526-538:decompressBlockByS16"
            }
        ],
        "272-310:decompressOneBlock": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                "class": "LCPForDelta",
                "method": "453-464:decompressBBitSlots"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                "class": "LCPForDelta",
                "method": "526-538:decompressBlockByS16"
            }
        ],
        "203-260:compressOneBlockCore2": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                "class": "LCPForDelta",
                "method": "579-590:writeBits"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                "class": "LCPForDelta",
                "method": "496-510:compressBlockByS16"
            }
        ],
        "144-201:compressOneBlockCore": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                "class": "LCPForDelta",
                "method": "579-590:writeBits"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                "class": "LCPForDelta",
                "method": "496-510:compressBlockByS16"
            }
        ],
        "102-130:compress": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                "class": "LCPForDelta",
                "method": "429-437:checkBigNumbers"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                "class": "LCPForDelta",
                "method": "144-201:compressOneBlockCore"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.LCPForDelta",
                "class": "LCPForDelta",
                "method": "399-414:estimateCompressedSize"
            }
        ],
        "88-90:setCompBuffer": [],
        "84-86:getCompBuffer": [],
        "496-510:compressBlockByS16": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.Simple16WithHardCodes",
                "class": "Simple16WithHardCodes",
                "method": "92-117:s16Compress"
            }
        ]
    },
    "ByteIntegerCODEC": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/ByteIntegerCODEC.java",
        "57-59:uncompress1": [],
        "36-38:compress1": []
    },
    "VariableByte": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/VariableByte.java",
        "183-209:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "178-180:toString": [],
        "144-175:uncompress1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "115-141:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "80-112:compress1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                "class": "VariableByte",
                "method": "24-26:extract7bits"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                "class": "VariableByte",
                "method": "28-30:extract7bitsmaskless"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "38-77:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                "class": "VariableByte",
                "method": "218-220:makeBuffer"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                "class": "VariableByte",
                "method": "24-26:extract7bits"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                "class": "VariableByte",
                "method": "28-30:extract7bitsmaskless"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "32-35:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.VariableByte",
                "class": "VariableByte",
                "method": "38-77:headlessCompress"
            }
        ],
        "218-220:makeBuffer": [],
        "28-30:extract7bitsmaskless": [],
        "24-26:extract7bits": []
    },
    "IntWrapper": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/IntWrapper.java",
        "94-96:toString": [],
        "79-81:longValue": [],
        "74-76:intValue": [],
        "55-57:floatValue": [],
        "50-52:doubleValue": [],
        "89-91:set": [],
        "69-71:increment": [],
        "62-64:get": [],
        "45-47:add": [],
        "24-26:IntWrapper1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            }
        ],
        "21-23:IntWrapper": []
    },
    "IntegratedLongCODEC": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/longcompression/IntegratedLongCODEC.java"
    },
    "Util": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/Util.java",
        "207-209:greatestMultiple": [],
        "182-196:unpackw": [],
        "166-180:packw": [],
        "159-164:packsizew": [],
        "141-157:unpack": [],
        "120-139:pack": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "113-118:packsize"
            }
        ],
        "113-118:packsize": [],
        "109-111:bits": [],
        "93-100:maxdiffbits": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "109-111:bits"
            }
        ],
        "43-77:maxbits32": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "109-111:bits"
            }
        ],
        "36-41:maxbits": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "109-111:bits"
            }
        ],
        "20-22:smallerorequalthan": []
    },
    "SkippableLongCODEC": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/longcompression/SkippableLongCODEC.java",
        "67-69:headlessUncompress": [],
        "45-47:headlessCompress": []
    },
    "TestLongAs2IntsCodec": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/longcompression/TestLongAs2IntsCodec.java",
        "100-102:testCodec_intermediateHighPowerOfTwo_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "79-85:compress1"
            }
        ],
        "93-97:testCodec_ZeroThenAllPowerOfTwo_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongAs2IntsCodec",
                "class": "TestLongAs2IntsCodec",
                "method": "23-45:checkConsistency"
            }
        ],
        "85-90:testCodec_allPowerOfTwo_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongAs2IntsCodec",
                "class": "TestLongAs2IntsCodec",
                "method": "23-45:checkConsistency"
            }
        ],
        "80-82:testCodec_ZeroMinValue_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongAs2IntsCodec",
                "class": "TestLongAs2IntsCodec",
                "method": "23-45:checkConsistency"
            }
        ],
        "75-77:testCodec_MinValue_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongAs2IntsCodec",
                "class": "TestLongAs2IntsCodec",
                "method": "23-45:checkConsistency"
            }
        ],
        "69-72:testCodec_ZeroTimes128Minus1_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongAs2IntsCodec",
                "class": "TestLongAs2IntsCodec",
                "method": "23-45:checkConsistency"
            }
        ],
        "63-66:testCodec_ZeroTimes127Minus1_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongAs2IntsCodec",
                "class": "TestLongAs2IntsCodec",
                "method": "23-45:checkConsistency"
            }
        ],
        "58-60:testCodec_ZeroTimes8Minus1_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongAs2IntsCodec",
                "class": "TestLongAs2IntsCodec",
                "method": "23-45:checkConsistency"
            }
        ],
        "53-55:testCodec_Minus1_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongAs2IntsCodec",
                "class": "TestLongAs2IntsCodec",
                "method": "23-45:checkConsistency"
            }
        ],
        "48-50:testCodec_Zero_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.TestLongAs2IntsCodec",
                "class": "TestLongAs2IntsCodec",
                "method": "23-45:checkConsistency"
            }
        ],
        "23-45:checkConsistency": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "79-85:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "87-93:uncompress0"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "97-103:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "105-111:uncompress1"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "113-119:compressHeadless"
            },
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.LongTestUtils",
                "class": "LongTestUtils",
                "method": "121-128:uncompressHeadless"
            }
        ]
    },
    "Delta": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/differential/Delta.java",
        "129-148:fastinverseDelta1": [],
        "97-113:fastinverseDelta0": [],
        "84-88:inverseDelta": [],
        "68-75:delta2": [],
        "43-50:delta1": [],
        "24-28:delta0": []
    },
    "Simple16WithHardCodes": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/com/kamikaze/pfordelta/Simple16WithHardCodes.java",
        "465-681:s16DecompressOneNumberWithHardCodesIntegrated": [],
        "248-463:s16DecompressOneNumberWithHardCodes": [],
        "233-246:s16DecompressWithIntBufferIntegratedBackup": [],
        "225-231:s16DecompressWithIntBufferIntegrated2": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.Simple16WithHardCodes",
                "class": "Simple16WithHardCodes",
                "method": "465-681:s16DecompressOneNumberWithHardCodesIntegrated"
            }
        ],
        "209-223:s16DecompressWithIntBufferIntegrated": [],
        "202-207:s16DecompressWithIntBufferWithHardCodes": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.Simple16WithHardCodes",
                "class": "Simple16WithHardCodes",
                "method": "248-463:s16DecompressOneNumberWithHardCodes"
            }
        ],
        "186-200:s16DecompressWithIntBuffer": [],
        "171-184:s16DecompressWithIntBufferBackup": [],
        "158-169:s16Decompress": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.Simple16WithHardCodes",
                "class": "Simple16WithHardCodes",
                "method": "696-700:readBitsForS16"
            }
        ],
        "120-141:s16CompressBackup": [],
        "92-117:s16Compress": [],
        "696-700:readBitsForS16": []
    },
    "BitPacking": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/BitPacking.java",
        "4627-4669:fastunpack9": [],
        "4591-4625:fastunpack8": [],
        "4549-4589:fastunpack7": [],
        "4509-4547:fastunpack6": [],
        "4469-4507:fastunpack5": [],
        "4433-4467:fastunpack4": [],
        "4428-4431:fastunpack32": [],
        "4362-4426:fastunpack31": [],
        "4298-4360:fastunpack30": [],
        "4260-4296:fastunpack3": [],
        "4196-4258:fastunpack29": [],
        "4136-4194:fastunpack28": [],
        "4074-4134:fastunpack27": [],
        "4014-4072:fastunpack26": [],
        "3954-4012:fastunpack25": [],
        "3902-3952:fastunpack24": [],
        "3844-3900:fastunpack23": [],
        "3788-3842:fastunpack22": [],
        "3732-3786:fastunpack21": [],
        "3680-3730:fastunpack20": [],
        "3644-3678:fastunpack2": [],
        "3590-3642:fastunpack19": [],
        "3538-3588:fastunpack18": [],
        "3486-3536:fastunpack17": [],
        "3450-3484:fastunpack16": [],
        "3400-3448:fastunpack15": [],
        "3352-3398:fastunpack14": [],
        "3304-3350:fastunpack13": [],
        "3260-3302:fastunpack12": [],
        "3214-3258:fastunpack11": [],
        "3170-3212:fastunpack10": [],
        "3134-3168:fastunpack1": [],
        "3129-3132:fastunpack0": [],
        "3021-3127:fastunpack": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3129-3132:fastunpack0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3134-3168:fastunpack1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3644-3678:fastunpack2"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "4260-4296:fastunpack3"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "4433-4467:fastunpack4"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "4469-4507:fastunpack5"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "4509-4547:fastunpack6"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "4549-4589:fastunpack7"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "4591-4625:fastunpack8"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "4627-4669:fastunpack9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3170-3212:fastunpack10"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3214-3258:fastunpack11"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3260-3302:fastunpack12"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3304-3350:fastunpack13"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3352-3398:fastunpack14"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3400-3448:fastunpack15"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3450-3484:fastunpack16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3486-3536:fastunpack17"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3538-3588:fastunpack18"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3590-3642:fastunpack19"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3680-3730:fastunpack20"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3732-3786:fastunpack21"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3788-3842:fastunpack22"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3844-3900:fastunpack23"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3902-3952:fastunpack24"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3954-4012:fastunpack25"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "4014-4072:fastunpack26"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "4074-4134:fastunpack27"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "4136-4194:fastunpack28"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "4196-4258:fastunpack29"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "4298-4360:fastunpack30"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "4362-4426:fastunpack31"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "4428-4431:fastunpack32"
            }
        ],
        "2977-3005:fastpackwithoutmask9": [],
        "2957-2975:fastpackwithoutmask8": [],
        "2929-2955:fastpackwithoutmask7": [],
        "2903-2927:fastpackwithoutmask6": [],
        "2878-2901:fastpackwithoutmask5": [],
        "2858-2876:fastpackwithoutmask4": [],
        "2853-2856:fastpackwithoutmask32": [],
        "2788-2851:fastpackwithoutmask31": [],
        "2726-2786:fastpackwithoutmask30": [],
        "2703-2724:fastpackwithoutmask3": [],
        "2642-2701:fastpackwithoutmask29": [],
        "2586-2640:fastpackwithoutmask28": [],
        "2529-2584:fastpackwithoutmask27": [],
        "2475-2527:fastpackwithoutmask26": [],
        "2422-2473:fastpackwithoutmask25": [],
        "2378-2420:fastpackwithoutmask24": [],
        "2329-2376:fastpackwithoutmask23": [],
        "2283-2327:fastpackwithoutmask22": [],
        "2238-2281:fastpackwithoutmask21": [],
        "2198-2236:fastpackwithoutmask20": [],
        "2178-2196:fastpackwithoutmask2": [],
        "2137-2176:fastpackwithoutmask19": [],
        "2099-2135:fastpackwithoutmask18": [],
        "2062-2097:fastpackwithoutmask17": [],
        "2042-2060:fastpackwithoutmask16": [],
        "2007-2040:fastpackwithoutmask15": [],
        "1973-2005:fastpackwithoutmask14": [],
        "1938-1971:fastpackwithoutmask13": [],
        "1906-1936:fastpackwithoutmask12": [],
        "1871-1904:fastpackwithoutmask11": [],
        "1839-1869:fastpackwithoutmask10": [],
        "1819-1837:fastpackwithoutmask1": [],
        "1814-1817:fastpackwithoutmask0": [],
        "1706-1812:fastpackwithoutmask": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1814-1817:fastpackwithoutmask0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1819-1837:fastpackwithoutmask1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2178-2196:fastpackwithoutmask2"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2703-2724:fastpackwithoutmask3"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2858-2876:fastpackwithoutmask4"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2878-2901:fastpackwithoutmask5"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2903-2927:fastpackwithoutmask6"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2929-2955:fastpackwithoutmask7"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2957-2975:fastpackwithoutmask8"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2977-3005:fastpackwithoutmask9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1839-1869:fastpackwithoutmask10"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1871-1904:fastpackwithoutmask11"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1906-1936:fastpackwithoutmask12"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1938-1971:fastpackwithoutmask13"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1973-2005:fastpackwithoutmask14"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2007-2040:fastpackwithoutmask15"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2042-2060:fastpackwithoutmask16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2062-2097:fastpackwithoutmask17"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2099-2135:fastpackwithoutmask18"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2137-2176:fastpackwithoutmask19"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2198-2236:fastpackwithoutmask20"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2238-2281:fastpackwithoutmask21"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2283-2327:fastpackwithoutmask22"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2329-2376:fastpackwithoutmask23"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2378-2420:fastpackwithoutmask24"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2422-2473:fastpackwithoutmask25"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2475-2527:fastpackwithoutmask26"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2529-2584:fastpackwithoutmask27"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2586-2640:fastpackwithoutmask28"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2642-2701:fastpackwithoutmask29"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2726-2786:fastpackwithoutmask30"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2788-2851:fastpackwithoutmask31"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "2853-2856:fastpackwithoutmask32"
            }
        ],
        "1648-1690:fastpack9": [],
        "1612-1646:fastpack8": [],
        "1570-1610:fastpack7": [],
        "1530-1568:fastpack6": [],
        "1490-1528:fastpack5": [],
        "1454-1488:fastpack4": [],
        "1449-1452:fastpack32": [],
        "1383-1447:fastpack31": [],
        "1319-1381:fastpack30": [],
        "1281-1317:fastpack3": [],
        "1217-1279:fastpack29": [],
        "1157-1215:fastpack28": [],
        "1095-1155:fastpack27": [],
        "1035-1093:fastpack26": [],
        "975-1033:fastpack25": [],
        "923-973:fastpack24": [],
        "865-921:fastpack23": [],
        "809-863:fastpack22": [],
        "753-807:fastpack21": [],
        "701-751:fastpack20": [],
        "665-699:fastpack2": [],
        "611-663:fastpack19": [],
        "559-609:fastpack18": [],
        "507-557:fastpack17": [],
        "471-505:fastpack16": [],
        "421-469:fastpack15": [],
        "373-419:fastpack14": [],
        "325-371:fastpack13": [],
        "281-323:fastpack12": [],
        "235-279:fastpack11": [],
        "191-233:fastpack10": [],
        "155-189:fastpack1": [],
        "150-153:fastpack0": [],
        "42-148:fastpack": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "150-153:fastpack0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "155-189:fastpack1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "665-699:fastpack2"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1281-1317:fastpack3"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1454-1488:fastpack4"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1490-1528:fastpack5"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1530-1568:fastpack6"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1570-1610:fastpack7"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1612-1646:fastpack8"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1648-1690:fastpack9"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "191-233:fastpack10"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "235-279:fastpack11"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "281-323:fastpack12"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "325-371:fastpack13"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "373-419:fastpack14"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "421-469:fastpack15"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "471-505:fastpack16"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "507-557:fastpack17"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "559-609:fastpack18"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "611-663:fastpack19"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "701-751:fastpack20"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "753-807:fastpack21"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "809-863:fastpack22"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "865-921:fastpack23"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "923-973:fastpack24"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "975-1033:fastpack25"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1035-1093:fastpack26"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1095-1155:fastpack27"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1157-1215:fastpack28"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1217-1279:fastpack29"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1319-1381:fastpack30"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1383-1447:fastpack31"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1449-1452:fastpack32"
            }
        ]
    },
    "BenchmarkOffsettedSeries": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/benchmarktools/BenchmarkOffsettedSeries.java",
        "272-294:main": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                "class": "BenchmarkOffsettedSeries",
                "method": "44-85:run"
            }
        ],
        "44-85:run": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR128",
                "class": "FastPFOR128",
                "method": "71-73:FastPFOR1281"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                "class": "BenchmarkOffsettedSeries",
                "method": "100-119:benchmark0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                "class": "BenchmarkOffsettedSeries",
                "method": "87-98:benchmarkSine"
            }
        ],
        "259-266:sortDataChunks": [],
        "245-257:deltaDataChunks": [],
        "231-243:generateDataChunks": [],
        "214-229:generateSineDataChunks": [],
        "204-212:getMaxLen": [],
        "194-202:decompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                "class": "Timer",
                "method": "20-22:start"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                "class": "Timer",
                "method": "24-27:end"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            }
        ],
        "181-192:compress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                "class": "Timer",
                "method": "20-22:start"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                "class": "Timer",
                "method": "24-27:end"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                "class": "PerformanceLogger",
                "method": "42-44:addOriginalSize"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                "class": "PerformanceLogger",
                "method": "46-48:addCompressedSize"
            }
        ],
        "163-179:checkArray": [],
        "134-161:benchmark2": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                "class": "BenchmarkOffsettedSeries",
                "method": "204-212:getMaxLen"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                "class": "BenchmarkOffsettedSeries",
                "method": "181-192:compress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                "class": "BenchmarkOffsettedSeries",
                "method": "194-202:decompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                "class": "BenchmarkOffsettedSeries",
                "method": "163-179:checkArray"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                "class": "PerformanceLogger",
                "method": "58-60:getBitPerInt"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                "class": "PerformanceLogger",
                "method": "66-69:getCompressSpeed"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.PerformanceLogger",
                "class": "PerformanceLogger",
                "method": "71-74:getDecompressSpeed"
            }
        ],
        "121-132:benchmark1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                "class": "BenchmarkOffsettedSeries",
                "method": "134-161:benchmark2"
            }
        ],
        "100-119:benchmark0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                "class": "BenchmarkOffsettedSeries",
                "method": "231-243:generateDataChunks"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                "class": "BenchmarkOffsettedSeries",
                "method": "245-257:deltaDataChunks"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                "class": "BenchmarkOffsettedSeries",
                "method": "259-266:sortDataChunks"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                "class": "BenchmarkOffsettedSeries",
                "method": "121-132:benchmark1"
            }
        ],
        "87-98:benchmarkSine": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                "class": "BenchmarkOffsettedSeries",
                "method": "214-229:generateSineDataChunks"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.benchmarktools.BenchmarkOffsettedSeries",
                "class": "BenchmarkOffsettedSeries",
                "method": "121-132:benchmark1"
            }
        ]
    },
    "SkippableLongComposition": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/longcompression/SkippableLongComposition.java",
        "66-68:toString": [],
        "53-63:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.SkippableLongCODEC",
                "class": "SkippableLongCODEC",
                "method": "67-69:headlessUncompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            }
        ],
        "39-50:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.SkippableLongCODEC",
                "class": "SkippableLongCODEC",
                "method": "45-47:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            }
        ],
        "32-36:SkippableLongComposition": []
    },
    "LongUniformDataGenerator": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/longcompression/synth/LongUniformDataGenerator.java",
        "70-84:negate": [
            {
                "schema": "JavaFastPFOR.src.test.me.lemire.longcompression.synth.LongUniformDataGenerator",
                "class": "LongUniformDataGenerator",
                "method": "86-92:saturatedCast"
            }
        ],
        "28-37:LongUniformDataGenerator": [],
        "86-92:saturatedCast": [],
        "53-65:generateUniformHash": []
    },
    "IntegratedVariableByte": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/differential/IntegratedVariableByte.java",
        "228-258:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "184-225:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                "class": "IntegratedVariableByte",
                "method": "267-269:makeBuffer"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                "class": "IntegratedVariableByte",
                "method": "27-29:extract7bits"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                "class": "IntegratedVariableByte",
                "method": "31-33:extract7bitsmaskless"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "179-181:toString": [],
        "144-176:uncompress1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "115-141:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "79-112:compress1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                "class": "IntegratedVariableByte",
                "method": "27-29:extract7bits"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                "class": "IntegratedVariableByte",
                "method": "31-33:extract7bitsmaskless"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "36-76:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                "class": "IntegratedVariableByte",
                "method": "267-269:makeBuffer"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                "class": "IntegratedVariableByte",
                "method": "27-29:extract7bits"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                "class": "IntegratedVariableByte",
                "method": "31-33:extract7bitsmaskless"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            }
        ],
        "267-269:makeBuffer": [],
        "31-33:extract7bitsmaskless": [],
        "27-29:extract7bits": []
    },
    "IntCompressor": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/IntCompressor.java",
        "71-79:uncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "66-68:headlessUncompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            }
        ],
        "49-63:compress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "44-46:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.UncompressibleInputException",
                "class": "UncompressibleInputException",
                "method": "13-15:UncompressibleInputException"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            }
        ],
        "26-36:IntCompressor": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                "class": "SkippableComposition",
                "method": "31-35:SkippableComposition"
            }
        ]
    },
    "ExampleTest": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/integercompression/ExampleTest.java",
        "940-975:headlessDemo_test10_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                "class": "SkippableComposition",
                "method": "31-35:SkippableComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "44-46:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "66-68:headlessUncompress"
            }
        ],
        "907-937:headlessDemo_test9_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                "class": "SkippableComposition",
                "method": "31-35:SkippableComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "44-46:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "66-68:headlessUncompress"
            }
        ],
        "877-904:headlessDemo_test8_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                "class": "SkippableComposition",
                "method": "31-35:SkippableComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "44-46:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "66-68:headlessUncompress"
            }
        ],
        "850-874:headlessDemo_test7_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                "class": "SkippableComposition",
                "method": "31-35:SkippableComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "44-46:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            }
        ],
        "832-847:headlessDemo_test6_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                "class": "SkippableComposition",
                "method": "31-35:SkippableComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "44-46:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            }
        ],
        "815-829:headlessDemo_test5_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                "class": "SkippableComposition",
                "method": "31-35:SkippableComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "44-46:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            }
        ],
        "799-812:headlessDemo_test4_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                "class": "SkippableComposition",
                "method": "31-35:SkippableComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "44-46:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            }
        ],
        "784-796:headlessDemo_test3_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                "class": "SkippableComposition",
                "method": "31-35:SkippableComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "44-46:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            }
        ],
        "771-781:headlessDemo_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                "class": "SkippableComposition",
                "method": "31-35:SkippableComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "44-46:headlessCompress"
            }
        ],
        "759-768:headlessDemo_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                "class": "SkippableComposition",
                "method": "31-35:SkippableComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            }
        ],
        "750-756:headlessDemo_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableComposition",
                "class": "SkippableComposition",
                "method": "31-35:SkippableComposition"
            }
        ],
        "707-747:advancedExample_test9_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                "class": "IntegratedVariableByte",
                "method": "115-141:uncompress0"
            }
        ],
        "666-704:advancedExample_test8_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedVariableByte",
                "class": "IntegratedVariableByte",
                "method": "115-141:uncompress0"
            }
        ],
        "640-663:advancedExample_test7_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            }
        ],
        "616-637:advancedExample_test6_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            }
        ],
        "595-613:advancedExample_test5_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            }
        ],
        "577-592:advancedExample_test4_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            }
        ],
        "560-574:advancedExample_test3_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            }
        ],
        "545-557:advancedExample_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            }
        ],
        "531-542:advancedExample_test1_decomposed": [],
        "518-528:advancedExample_test0_decomposed": [],
        "490-515:unsortedExample_test7_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            }
        ],
        "467-487:unsortedExample_test6_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            }
        ],
        "445-464:unsortedExample_test5_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            }
        ],
        "425-442:unsortedExample_test4_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            }
        ],
        "408-422:unsortedExample_test3_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            }
        ],
        "392-405:unsortedExample_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            }
        ],
        "377-389:unsortedExample_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            }
        ],
        "363-374:unsortedExample_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Composition",
                "class": "Composition",
                "method": "31-34:Composition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "90-92:FastPFOR1"
            }
        ],
        "336-360:basicExampleHeadless_test7_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                "class": "SkippableIntegratedComposition",
                "method": "33-37:SkippableIntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                "class": "SkippableIntegratedComposition",
                "method": "47-61:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                "class": "SkippableIntegratedComposition",
                "method": "64-77:headlessUncompress"
            }
        ],
        "314-333:basicExampleHeadless_test6_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                "class": "SkippableIntegratedComposition",
                "method": "33-37:SkippableIntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                "class": "SkippableIntegratedComposition",
                "method": "47-61:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                "class": "SkippableIntegratedComposition",
                "method": "64-77:headlessUncompress"
            }
        ],
        "293-311:basicExampleHeadless_test5_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                "class": "SkippableIntegratedComposition",
                "method": "33-37:SkippableIntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                "class": "SkippableIntegratedComposition",
                "method": "47-61:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            }
        ],
        "275-290:basicExampleHeadless_test4_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                "class": "SkippableIntegratedComposition",
                "method": "33-37:SkippableIntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                "class": "SkippableIntegratedComposition",
                "method": "47-61:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            }
        ],
        "260-272:basicExampleHeadless_test3_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                "class": "SkippableIntegratedComposition",
                "method": "33-37:SkippableIntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                "class": "SkippableIntegratedComposition",
                "method": "47-61:headlessCompress"
            }
        ],
        "247-257:basicExampleHeadless_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                "class": "SkippableIntegratedComposition",
                "method": "33-37:SkippableIntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            }
        ],
        "235-244:basicExampleHeadless_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                "class": "SkippableIntegratedComposition",
                "method": "33-37:SkippableIntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            }
        ],
        "225-232:basicExampleHeadless_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedComposition",
                "class": "SkippableIntegratedComposition",
                "method": "33-37:SkippableIntegratedComposition"
            }
        ],
        "200-222:basicExample_test7_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            }
        ],
        "180-197:basicExample_test6_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            }
        ],
        "161-177:basicExample_test5_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            }
        ],
        "144-158:basicExample_test4_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "74-76:intValue"
            }
        ],
        "130-141:basicExample_test3_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            }
        ],
        "117-127:basicExample_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            }
        ],
        "105-114:basicExample_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            }
        ],
        "95-102:basicExample_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedComposition",
                "class": "IntegratedComposition",
                "method": "33-37:IntegratedComposition"
            }
        ],
        "80-92:superSimpleExample_test3_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "29-39:IntegratedIntCompressor"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "52-65:compress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "73-81:uncompress"
            }
        ],
        "69-77:superSimpleExample_test2_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "29-39:IntegratedIntCompressor"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "52-65:compress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "73-81:uncompress"
            }
        ],
        "59-66:superSimpleExample_test1_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "29-39:IntegratedIntCompressor"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "52-65:compress"
            }
        ],
        "54-56:superSimpleExample_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.IntegratedIntCompressor",
                "class": "IntegratedIntCompressor",
                "method": "29-39:IntegratedIntCompressor"
            }
        ]
    },
    "FastPFOR": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/FastPFOR.java",
        "341-343:toString": [],
        "332-339:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "234-243:headlessUncompress"
            }
        ],
        "321-329:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "104-117:headlessCompress"
            }
        ],
        "234-243:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "245-319:decodePage"
            }
        ],
        "104-117:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "148-224:encodePage"
            }
        ],
        "352-354:makeBuffer": [],
        "90-92:FastPFOR1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "81-89:FastPFOR"
            }
        ],
        "81-89:FastPFOR": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "352-354:makeBuffer"
            }
        ],
        "245-319:decodePage": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3021-3127:fastunpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "148-224:encodePage": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.FastPFOR",
                "class": "FastPFOR",
                "method": "119-146:getBestBFromData"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "42-148:fastpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "119-146:getBestBFromData": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "109-111:bits"
            }
        ]
    },
    "NewPFD": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/NewPFD.java",
        "181-183:toString": [],
        "172-179:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "127-133:headlessUncompress"
            }
        ],
        "161-169:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "49-55:headlessCompress"
            }
        ],
        "127-133:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "135-159:decodePage"
            }
        ],
        "49-55:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "87-124:encodePage"
            }
        ],
        "63-85:getBestBFromData": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "36-41:maxbits"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "45-46:NewPFD": [],
        "135-159:decodePage": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.S16",
                "class": "S16",
                "method": "167-177:uncompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3021-3127:fastunpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "87-124:encodePage": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.NewPFD",
                "class": "NewPFD",
                "method": "63-85:getBestBFromData"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.S16",
                "class": "S16",
                "method": "34-45:compress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "42-148:fastpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ]
    },
    "SkippableIntegratedComposition": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/differential/SkippableIntegratedComposition.java",
        "64-77:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC",
                "class": "SkippableIntegratedIntegerCODEC",
                "method": "71-73:headlessUncompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            }
        ],
        "47-61:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.SkippableIntegratedIntegerCODEC",
                "class": "SkippableIntegratedIntegerCODEC",
                "method": "48-50:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            }
        ],
        "42-44:toString": [],
        "33-37:SkippableIntegratedComposition": []
    },
    "OptPFDS9": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/OptPFDS9.java",
        "196-198:toString": [],
        "186-193:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "141-147:headlessUncompress"
            }
        ],
        "175-183:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "46-53:headlessCompress"
            }
        ],
        "141-147:headlessUncompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "149-173:decodePage"
            }
        ],
        "46-53:headlessCompress": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "207-209:greatestMultiple"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "100-138:encodePage"
            }
        ],
        "42-43:OptPFDS9": [],
        "149-173:decodePage": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.S9",
                "class": "S9",
                "method": "124-197:uncompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3021-3127:fastunpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "100-138:encodePage": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.OptPFDS9",
                "class": "OptPFDS9",
                "method": "61-98:getBestBFromData"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.S9",
                "class": "S9",
                "method": "76-106:compress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "42-148:fastpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "61-98:getBestBFromData": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "36-41:maxbits"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.S9",
                "class": "S9",
                "method": "31-58:estimatecompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ]
    },
    "Composition": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/Composition.java",
        "65-67:toString": [],
        "54-62:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            }
        ],
        "37-51:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            }
        ],
        "31-34:Composition": []
    },
    "SkippableIntegerCODEC": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/SkippableIntegerCODEC.java",
        "66-68:headlessUncompress": [],
        "44-46:headlessCompress": []
    },
    "PForDeltaUnpack128WIthIntBuffer": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/com/kamikaze/pfordelta/PForDeltaUnpack128WIthIntBuffer.java",
        "17-73:unpack": [
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "75-76:unpack0"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "78-117:unpack1"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "119-159:unpack2"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "161-204:unpack3"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "206-248:unpack4"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "250-297:unpack5"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "299-347:unpack6"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "349-400:unpack7"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "402-448:unpack8"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "450-505:unpack9"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "507-563:unpack10"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "565-624:unpack11"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "626-684:unpack12"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "686-749:unpack13"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "751-805:unpack16"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "807-881:unpack20"
            },
            {
                "schema": "JavaFastPFOR.src.main.com.kamikaze.pfordelta.PForDeltaUnpack128WIthIntBuffer",
                "class": "PForDeltaUnpack128WIthIntBuffer",
                "method": "883-973:unpack28"
            }
        ],
        "883-973:unpack28": [],
        "807-881:unpack20": [],
        "751-805:unpack16": [],
        "686-749:unpack13": [],
        "626-684:unpack12": [],
        "565-624:unpack11": [],
        "507-563:unpack10": [],
        "450-505:unpack9": [],
        "402-448:unpack8": [],
        "349-400:unpack7": [],
        "299-347:unpack6": [],
        "250-297:unpack5": [],
        "206-248:unpack4": [],
        "161-204:unpack3": [],
        "119-159:unpack2": [],
        "78-117:unpack1": [],
        "75-76:unpack0": []
    },
    "TestUtils": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/integercompression/TestUtils.java",
        "164-186:testPackingw_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "166-180:packw"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "159-164:packsizew"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "182-196:unpackw"
            }
        ],
        "139-161:testPacking_test0_decomposed": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "120-139:pack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "113-118:packsize"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.Util",
                "class": "Util",
                "method": "141-157:unpack"
            }
        ],
        "129-136:uncompressHeadless": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "66-68:headlessUncompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            }
        ],
        "121-127:compressHeadless": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.SkippableIntegerCODEC",
                "class": "SkippableIntegerCODEC",
                "method": "44-46:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            }
        ],
        "113-119:uncompress1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.ByteIntegerCODEC",
                "class": "ByteIntegerCODEC",
                "method": "57-59:uncompress1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            }
        ],
        "105-111:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.ByteIntegerCODEC",
                "class": "ByteIntegerCODEC",
                "method": "36-38:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            }
        ],
        "95-101:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            }
        ],
        "87-93:compress1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            }
        ],
        "58-85:assertSymmetry": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "36-38:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntegerCODEC",
                "class": "IntegerCODEC",
                "method": "57-59:uncompress0"
            }
        ],
        "41-50:dumpIntArrayAsHex": [],
        "30-39:dumpIntArray": []
    },
    "LongTestUtils": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/test/java/me/lemire/longcompression/LongTestUtils.java",
        "130-132:longToBinaryWithLeading": [],
        "121-128:uncompressHeadless": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.SkippableLongCODEC",
                "class": "SkippableLongCODEC",
                "method": "67-69:headlessUncompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            }
        ],
        "113-119:compressHeadless": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.SkippableLongCODEC",
                "class": "SkippableLongCODEC",
                "method": "45-47:headlessCompress"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            }
        ],
        "105-111:uncompress1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.ByteLongCODEC",
                "class": "ByteLongCODEC",
                "method": "59-61:uncompress1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            }
        ],
        "97-103:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.ByteLongCODEC",
                "class": "ByteLongCODEC",
                "method": "38-40:compress1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            }
        ],
        "87-93:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "59-61:uncompress1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            }
        ],
        "79-85:compress1": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "24-26:IntWrapper1"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "38-40:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            }
        ],
        "50-77:assertSymmetry": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "21-23:IntWrapper"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "38-40:compress0"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.longcompression.LongCODEC",
                "class": "LongCODEC",
                "method": "59-61:uncompress1"
            }
        ],
        "33-42:dumpIntArrayAsHex": [],
        "22-31:dumpIntArray": []
    },
    "XorBinaryPacking": {
        "schema_file": "java_projects/cleaned_final_projects_decomposed_tests/JavaFastPFOR/src/main/java/me/lemire/integercompression/differential/XorBinaryPacking.java",
        "100-102:toString": [],
        "64-97:uncompress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                "class": "XorBinaryPacking",
                "method": "128-138:xorUnpack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "23-61:compress0": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "62-64:get"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "69-71:increment"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                "class": "XorBinaryPacking",
                "method": "104-113:xorMaxBits"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.differential.XorBinaryPacking",
                "class": "XorBinaryPacking",
                "method": "115-126:xorPack"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "45-47:add"
            },
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.IntWrapper",
                "class": "IntWrapper",
                "method": "89-91:set"
            }
        ],
        "128-138:xorUnpack": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "3021-3127:fastunpack"
            }
        ],
        "115-126:xorPack": [
            {
                "schema": "JavaFastPFOR.src.main.me.lemire.integercompression.BitPacking",
                "class": "BitPacking",
                "method": "1706-1812:fastpackwithoutmask"
            }
        ],
        "104-113:xorMaxBits": []
    }
}